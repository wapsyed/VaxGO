---
title: "VaxGO Gene set construction"
author: "Wasim Alu√≠sio Prates Syed"
format: html
editor: 
  markdown: 
    wrap: 72
---

# Settings

## Libraries

```{r eval=FALSE, include=FALSE, echo =FALSE}

#CRAN packages ----------------
# install.packages("ggbeeswarm")
# install.packages("ggrepel")
# install.packages("tidyverse")
# install.packages("org.Hs.eg.db")
# install.packages("RColorBrewer")
# install.packages("plotly")
# install.packages("msigdbr")
# install.packages("ape")
# install.packages("sva")
# install.packages("gplots")
# install.packages("tibble")
# install.packages("metaRNASeq")
# install.packages("editData")
# install.packages("tidyverse")
# install.packages("corrr")
# install.packages("ggcorrplot")
# install.packages("FactoMineR")
# install.packages("factoextra")
# install.packages("esquisse")
# install.packages("corto")
# install.packages("reshape2")
# install.packages("explore")
# install.packages("extrafont")
# install.packages("showtext")
# install.packages("flexdashboard")
# install.packages("ggheatmap")
# install_github("jokergoo/InteractiveComplexHeatmap")



# Bioconductor packages ------------------------
# install.packages("BiocManager") 
# BiocManager::install("GEOquery") 
# BiocManager::install("org.Hs.eg.db")
# BiocManager::install("deseq2")
# BiocManager::install("biomaRt")
# BiocManager::install("celldex")
# BiocManager::install("NMF")
# BiocManager::install("BiasedUrn")
# BiocManager::install("GSVA")
# BiocManager::install("sva")
# BiocManager::install("clusterProfiler")
# BiocManager::install("ggupset")
# BiocManager::install("msigdbr")
# BiocManager::install("EnhancedVolcano")
# BiocManager::install("AnnotationDbi")

# Libraries -----------------
library(devtools)
library(GEOquery)
library(Matrix)
library(circlize)
library(RColorBrewer)
library(celldex)
library(biomaRt)
library(org.Hs.eg.db)
library(plotly)
library(DESeq2)
library(msigdbr)
library(ape)
library(GSVA)
library(sva)
library(clusterProfiler)
library(EnhancedVolcano)
library(ggbeeswarm)
library(corrr)
library(ggcorrplot)
library(FactoMineR)
library(factoextra)
library(esquisse)
library(ComplexHeatmap)
library(janitor)
library(ggsci)
library(patchwork)
library(ggthemes)
library(here)
library(extrafont)
library(showtext)
library(readxl)
library(scales)
library(tidyverse)
library(flexdashboard)
library(ggheatmap)
library(vegan)
library(InteractiveComplexHeatmap)

```

## Figures standards

```{r message=FALSE, warning=FALSE}

# Import fonts
font_add_google("Montserrat", "montserrat")
font_add_google("Bebas Neue", "bebas")
font_add_google("Arimo", "arimo")
font_add_google("Roboto", "roboto")
font_add_google("Libre Baskerville", "baskerville")
font_add_google("Playfair Display", "playfair")
font_add_google("Arimo", "arimo")
font_add_google("Merriweather", "merriweather")
showtext_auto()
showtext_opts(dpi = 300)


# Custom theme
theme_vaxgo <- function() {
  theme_minimal() +
  theme(
    text = element_text(color = "black", 
                        size = 12,
                        family = "arimo",
                        hjust = -1),
    plot.title = element_text(family = "montserrat",
                              size = 16,
                              face = "bold"),
    plot.subtitle = element_text(family = "arimo",
                                 size = 12),
    axis.text.y = element_text(hjust = 1,
                               color = "black"),
    axis.text.x = element_text(hjust = 0.5,
                               color = "black"),
    axis.title = element_text(size = 12),
    axis.title.x = element_text(hjust = 0.5),
    legend.title = element_text(face = "bold",
                                size = 10),
    legend.text = element_text(size = 8),
    legend.key.size = unit(0.4, 'cm'),
    axis.ticks = element_line(linewidth = 0.5),
    plot.background = element_rect(fill='white', colour='white'),
    plot.caption = element_text(hjust = 0,
                                family = "arimo"),
    panel.grid = element_line(linewidth = 0.1,
                              color = "grey97")
  )
}


col_immune = c("ADAPTIVE" = "#bc3908",
          "B CELL" = "#e76f51",
          "HUMORAL" = "#ee8959",
          "IMMUNOGLOBULIN-MEDIATED"= "#f4a261",
          "CELLULAR" = "#e9c46a",
          "T CELLS" = "#ECDDA3",
          "T HELPER CELLS" = "#EDE9BF",
          "COMPLEMENT" = "#734f5a",
          "ANTIVIRAL & IFN" = "#D2E1DF",
          "ARPP" = "#BCD2CF",
          "DENDRITIC CELL" = "#1E5750",
          "EOSINOPHIL" = "#183431",
          "INFLAMMATION" = "#247A70",
          "INNATE" = "#2a9d8f",
          "MAST CELL" = "#A5C2BF",
          "MONOCYTE" = "#7CB6AF",
          "NEUTROPHIL" = "#264653",
          "NK CELL" = "#125961",
          "MACROPHAGE" = "#288C62",
          "GENERAL" = "#babd8d",
          "ANTIMICROBIAL" = "#219ebc"
  )

#Colors for Flourish
formatted_vector <- paste(names(col_immune), ":", col_immune) %>% 
  cat(., sep = "\n")

ann_vaxsig_colors = list(
  Platform = c("VLP" = "#7E6148FF",
           "LA" =  "#E64B35FF",
           "CONJ" = "#F39B7FFF", 
           'IN'= "#00A087FF", #1st Gen  vaccines
           'VV' = "#3C5488FF", #3rd Gen vaccines
           'RNA' = "#4DBBD5FF",
           'SU' = "#8491B4FF",
           'I'= "#DC0000FF",
           "H" = "grey95"),
  week = c("0" = "#ECF8FA",
           "1" = "#caf0f8",
           "2" = "#6CD5EA",
           "3" = "#0087BF",
           "4" = "#015BA0", 
           "6" = "#03045e",
           "7" = "#03045e",
           "8" = "#03045e"),
  month = c("1" = "#caf0f8",
            "0" = "#6CD5EA",
            "2" = "#015BA0"),
  dose = c(
    "0" = "grey95",
    "1" = "#91D1C2A0",
    "2" = "#00A087FF",
    "3" = "#3C5488FF"),
  date = c(
    "H" = "#F39B7FFF",
    "D" = "#DF8F44FF",
    "M" = "#7E6148FF",
    "ANY" = "black"),
  day = c(
    "0" = "white",
    "1" = "#caf0f8",
    "2" = "#ade8f4",
    "3" = "#90e0ef",
    "4" = "#6CD5EA",
    "5" = "#48cae4",
    "6" = "#00b4d8",
    "7" = "#0096c7",
    "10" = "#0087BF",
    "11" = "#0087BF",
    "14" = "#0077b6",
    "26" = "#015BA0",
    "28" = "#023e8a",
    "51" = "#03045e"),
  "Pathogen" = c('MENINGOCOCCUS'	= "#374E55FF",
                              'PNEUMOCOCCUS'	= "#697B7F",
                              'TUBERCULOSIS'	= "#9BA7AA",
                              'F TULARENSIS'	= "#CDD3D5",
                              'LEISHMANIA'	= "#DF8F44FF",
                              'MALARIA' = "#EFC7A2",
                              'EBOV'	= "#142F36",
                              'HBV'	= "#275E6B",
                              'HBV, HAV'	= "#275E6B",
                              'HIV'	= "#3A8DA0",
                              'HPV'	= "#4DBBD5",
                              'INFLUENZA'	= "#A6DDEA",
                              'MEASLES'	= "#D3EEF5",
                              'MMR'	= "#a2d2ff",
                              'SMALLPOX'	= "#bde0fe",
                              'VEEV'	= "#b8c0ff",
                              'VZV'	= "#94d2bd",
                              'YF'	= "#118ab2"),
  
  "Microbe type" = c("VIRUS" = "#4DBBD5FF",
                   'BACTERIUM' = "#374E55FF",
                   'PARASITE' = "#DF8F44FF"))

# Palette JAMA
# pal_jama("default")(10) %>% 
#   show_col()


# Palette COSMIC
# pal_cosmic("hallmarks_light")(10) %>%
#   show_col()

```

# 1. Construction of gene set databases

## 1.1. Blood transcription modules

<https://www.nature.com/articles/ni.2789>

```{r}
#Download table
btm_annotation_table <- read_csv(here("Tables", "btm_annotation_immune_table_labelled.csv"))


#Filter immune modules
btm_annotation_immune <- btm_annotation_table %>%
  select(
    id,
    immune_system:cells,
    title = module_title,
    complete_name = composite_name,
    module_size = module_size_4,
    module_category,
    annotation_level,
    genes = module_member_genes,
    top_matched_gene_ontology_terms_number_of_matched_genes
  ) %>%
  filter(module_category == "immune")
  
saveRDS(btm_annotation_immune, file = here("Tables", "btm_annotation_immune.rds"))

#Separate rows
btm_genes = btm_annotation_immune %>%
  separate_rows(genes, sep = ",")
saveRDS(btm_genes, file = here("Tables", "btm_annotation_genes.rds"))

btm_genes
glimpse(btm_genes)
```

### Descriptive statistics

**Top 20 cells by markers**

```{r}

btm_annotation_stats = btm_annotation_immune %>% 
  arrange(-module_size) %>% 
  slice_head(n = 20)

ggbtm_annotation_stats = ggplot(btm_annotation_stats) +
  aes(x = module_size, 
      y = reorder(title, module_size), 
      fill = immune_system) +
  geom_col() +
  geom_text(aes(label = module_size),
            hjust = -0.2,
            size = 3) +
  labs(
    x = "Set size",
    y = "",
    title = "Top 20 modules",
    subtitle = "By set size",
    fill = "Immune system",
    caption = "Caption: BTM gene set analysis"
  ) +
  theme_vaxgo() +
  theme(legend.position = c(0.6, 0.4),
        axis.text.y = element_text(hjust = 1),
        axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.ticks.y = element_blank(),
        panel.grid = element_blank()) +
  scale_x_continuous(limits = c(0,500), 
                     breaks = seq(0, 400, 50),
                     expand = c(0,0)) +
  scale_y_discrete(expand = c(0, 0)) +
  scale_fill_jama()

ggbtm_annotation_stats

ggsave(ggbtm_annotation_stats, file = here("Figures", "BTM_Top20_bygenes_stats.png"), width = 10, height = 5)

```


### Jaccard, overlap coefficient and Venn Diagram heatmap

```{r}
############# Input
data = btm_genes %>% 
  select(process = title, genes)
```

```{r}
############### VENN DIAGRAM

# Function -------
overlap_genes <- function(cond1, cond2, data) {
  genes_cond1 <- data$genes[data$process == cond1]
  genes_cond2 <- data$genes[data$process == cond2]
  
  genes_shared <- intersect(genes_cond1, genes_cond2)
  
  genes_notshared_cond1 <- setdiff(genes_cond1, genes_cond2)
  genes_notshared_cond2 <- setdiff(genes_cond2, genes_cond1)
  
  total_genes_cond1 <- length(genes_cond1)
  total_genes_cond2 <- length(genes_cond2)
  
  percentage_shared_cond1 <- length(genes_shared) / total_genes_cond1 * 100
  percentage_shared_cond2 <- length(genes_shared) / total_genes_cond2 * 100
  
  shared_genes <- data.frame(
    Cond1 = cond1,
    Cond2 = cond2,
    Shared = length(genes_shared),
    NotShared_cond1 = length(genes_notshared_cond1),
    NotShared_cond2 = length(genes_notshared_cond2),
    Total_Genes_Cond1 = total_genes_cond1,
    Total_Genes_Cond2 = total_genes_cond2,
    Genes_Names = paste(genes_shared, collapse = ", "),
    Percentage_Shared_Cond1 = percentage_shared_cond1,
    Percentage_Shared_Cond2 = percentage_shared_cond2
  )
  
  return(shared_genes)
}


# Perform calculations
unique_cond <- unique(data$process) # List sets
shared_genes_df <- data.frame() # Store data

for (i in 1:(length(unique_cond) - 1)) {
  for (j in (i + 1):length(unique_cond)) {
    resultado_temp <- overlap_genes(unique_cond[i], unique_cond[j], data)
    shared_genes_df <- bind_rows(shared_genes_df, resultado_temp)
  }
}

# Fisher's exact test
fisher_exact_test <- function(shared, notshared1, notshared2) {
  cont_table <- matrix(c(shared, notshared1, notshared2, 0), nrow = 2)
  results_fisher <- fisher.test(cont_table)
  return(results_fisher$p.value)
}
shared_genes_df = shared_genes_df %>%
  mutate(pvalue = pmap_dbl(list(Shared, NotShared_cond1, NotShared_cond2), fisher_exact_test)) %>% 
  mutate("-log(p)" = -log10(pvalue))


#Duplicar e trocar colunas (Vacina 1 e Vacina 2)
shared_genes_df2 = shared_genes_df %>% 
  rename(Cond1_temp = Cond1, Cond2_temp = Cond2) %>%
  rename(Cond1 = Cond2_temp, Cond2 = Cond1_temp)

#Unir datasets com os dados espelhados
shared_genes_df_mirror = shared_genes_df %>% 
  bind_rows(shared_genes_df2) %>% 
  mutate(Percentage_Shared_Cond1 = round(Percentage_Shared_Cond1, 2),
         Percentage_Shared_Cond2 = round(Percentage_Shared_Cond2, 2))
  
#JACCARD DISTANCE
jaccard.matrix <- data %>%
  mutate(present = 1) %>% 
  distinct() %>% 
  pivot_wider(names_from = genes, values_from = present, values_fill = 0) %>%
  column_to_rownames(var = "process") %>%
  vegdist(binary = TRUE, method = "jaccard", diag = TRUE, upper = TRUE) %>%
  as.matrix() %>%
  {1 - .}

shared_genes_df_mirror = jaccard.matrix %>% 
  as.data.frame() %>% 
  rownames_to_column("Cond1") %>% 
  pivot_longer(cols = -"Cond1",
               names_to = "Cond2",
               values_to = "jaccard_distance") %>% 
  inner_join(shared_genes_df_mirror, by = join_by(Cond1, Cond2)) %>% 
  mutate(jaccard_distance = round(jaccard_distance, 3))

#Save
write.csv(shared_genes_df_mirror, file = here("Tables", "BTM_sharedgenes_Fisher_Jaccard.csv"),
          row.names = F)
```

### Flourish Circos plot

```{r}
shared_genes_df_mirror %>% 
  filter(Shared > 1,
         pvalue < 0.10) %>% 
  select(Cond1, Cond2, Shared, Total_Genes_Cond1, Percentage_Shared_Cond1, pvalue:"-log(p)") %>% 
  write_csv(file = here("Tables", "Flourish_Circos_BTM_Links.csv"))


ann = btm_annotation_table %>% 
  select(module_title, immune_system:cells) 

#Colors for Flourish
colors = col_immune %>%
  as.data.frame() %>%
  rownames_to_column("immune_system") %>%
  mutate(immune_system = str_to_sentence(immune_system)) %>% 
  rename(color_immune_system = ".")

colors_btm_immune_system = ann %>%
  clean_names() %>%
  select(module_title, immune_system) %>%
  inner_join(colors, by = "immune_system")

paste(colors_btm_immune_system$module_title, ":", colors_btm_immune_system$color_immune_system) %>%
  cat(., sep = "\n")

```

### Heatmap (overlap counts)

```{r}
matrix_data = shared_genes_df_mirror %>% 
  filter(pvalue <= 0.10) %>% 
  distinct() %>% 
  select(Cond1, Cond2, Shared) %>% 
  pivot_wider(names_from = "Cond1",
              values_from = "Shared") %>% 
  column_to_rownames("Cond2") %>% 
  as.matrix() %>% 
  replace(is.na(.), 0)

# Column and row annotation
######## Annotations
annotation_immunego = shared_genes_df_mirror %>% 
  select(process = Cond1) %>% 
  distinct() %>% 
  inner_join(ImmuneGO_Annotated_GO, by = "process") %>% 
  select(process, immune_system) %>% 
  distinct()

#Columns
ann_cols_heatmap = matrix_data %>% 
  colnames() %>% 
  data.frame() %>% 
  rename(module_title = '.') %>% 
  inner_join(ann, by = "module_title") %>% 
  distinct() %>% 
  arrange(module_title) %>% 
  column_to_rownames("module_title") %>% 
  mutate(immune_system = str_to_upper(immune_system)) %>% 
  select(immune_system)

matrix_data = matrix_data %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "module_title") %>% 
  inner_join(ann_cols_heatmap %>% rownames_to_column("module_title"), by = "module_title") %>% 
  select(!c(immune_system)) %>% 
  arrange(module_title) %>% 
  column_to_rownames("module_title") %>% 
  t() %>% 
  as.data.frame() %>% 
  mutate_if(is.character, as.numeric) %>%
  as.matrix() 

#Rows Immune ----
ann_rows_heatmap = ann_cols_heatmap

mat = matrix_data %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "module_title") %>% 
  inner_join(ann_rows_heatmap %>% rownames_to_column("module_title"), by = "module_title") %>% 
  select(!c(immune_system)) %>% 
  arrange(module_title) %>% 
  column_to_rownames("module_title") %>% 
  as.data.frame() %>% 
  mutate_if(is.character, as.numeric) %>%
  as.matrix() 

#Check dimensions
dim(mat)
dim(ann_cols_heatmap)
dim(ann_rows_heatmap)

colors_immune = list(immune_system = col_immune)

```


```{r fig.width= 10, fig.height=8}
#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap, 
                       col = colors_immune,
                       annotation_name_side = "right")

row_ha = row_ha = HeatmapAnnotation(df = ann_rows_heatmap,
                       col = colors_immune,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors
col_fun <- colorRamp2(c(0, 100), c("white", "#ed6a5a"))

file = "BTM_Modules_Overlapping_ImmuneSystem"

width_image = 20
height_image = 20
width = unit(10, "cm")
height = unit(10, "cm")
column_names_gp = gpar(fontsize = 10)
row_names_gp = gpar(fontsize = 10)
rect_gp = gpar(col = "gray80", lwd = 0.5)

fileimageheatmap_grouped = here("Figures", paste0(file, sep ="_", "Complexheatmap.png"))

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                        left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "horizontal"),
                        col = col_fun, #color
                        # #cell_fun = function(j, i, x, y, width, height, fill) {
                        #                     if(mat[i, j] > 0)
                        #                     grid.text(sprintf("%.f", mat[i, j]), 
                        #                               x, y, 
                        #                               gp = gpar(fontsize = 5))},
                        show_column_names = TRUE,
                        column_title = file,
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "black",
                        name = "Shared",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(0, "cm"),
                        row_split = NULL,
                        column_split = NULL,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = F,
                        row_dend_side = "left",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height)

heatmap_plot = draw(heatmap_plot, 
     annotation_legend_side = "left", 
     heatmap_legend_side = "bottom")

heatmap_plot

dev.off()


```

### Heatmap (Jaccard distance)

```{r}
mat = jaccard.matrix
```

```{r fig.width= 10, fig.height=8}
#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap, 
                       col = colors_immune,
                       annotation_name_side = "right")

row_ha = row_ha = HeatmapAnnotation(df = ann_rows_heatmap,
                       col = colors_immune,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors

max_value = mat %>% 
   replace(. == 1.00000, 0) %>% 
   max()

col_fun <- colorRamp2(c(0, max_value), c("white", "#ed6a5a"))

file = "BTM_Modules_Jaccard_ImmuneSystem_"
width_image = 20
height_image = 20
width = unit(10, "cm")
height = unit(10, "cm")
column_names_gp = gpar(fontsize = 10)
row_names_gp = gpar(fontsize = 10)
rect_gp = gpar(col = "gray80", lwd = 0.5)

fileimageheatmap_grouped = here("Figures", paste0(file, sep ="_", "Complexheatmap.png"))

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                        left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "horizontal"),
                        col = col_fun, #color
                        cell_fun = function(j, i, x, y, width, height, fill) {
                                            if(mat[i, j] > 0)
                                            grid.text(sprintf("%.2f", mat[i, j]), 
                                                      x, y, 
                                                      gp = gpar(fontsize = 5))},
                        show_column_names = TRUE,
                        column_title = file,
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "black",
                        name = "Jaccard distance",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(1, "cm"),
                        row_split = NULL,
                        column_split = NULL,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = T,
                        row_dend_side = "left",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height)

heatmap_plot = draw(heatmap_plot, 
     annotation_legend_side = "left", 
     heatmap_legend_side = "bottom")

dev.off()

heatmap_plot

```




## 1.2. CellMarker

Available dataset links: -
"<http://117.50.127.228/CellMarker/CellMarker_download_files/file/Cell_marker_Human.xlsx>" -
"<http://117.50.127.228/CellMarker/CellMarker_download_files/file/Cell_marker_Human.xlsx>"

```{r}
##################### Baixar tabela de marcadores celulares

url <-
  "http://117.50.127.228/CellMarker/CellMarker_download_files/file/Cell_marker_Human.xlsx" #or http://117.50.127.228/CellMarker/CellMarker_download_files/file/Cell_marker_Human.xlsx
f <- tempfile(fileext = ".xlsx")
download.file(url, f)
cell_marker_data <- readxl::read_excel(f, 1)

##################### Sub-agrupar c√©lulas por sistema imunol√≥gico

#Filtrar marcadores e c√©lulas por tecido (Blood)
cells <- cell_marker_data %>%
  filter(tissue_class == "Blood") %>%
  select(cell_name, marker)

##################### Filtrar c√©lulas
# Acessar todos os tipos de c√©lulas no dataset de Blood
cellmarker_celltypes <- unique(cells$cell_name)

# Filtrar apenas os tipos que cont√™m "B cell" e plasmacell
Bcells_no = cellmarker_celltypes[grep("B cell", cellmarker_celltypes)] #44 outputs
Plasmacells_no = cellmarker_celltypes[grep("plasma", cellmarker_celltypes)] #5 outputs

# Filtrar apenas os tipos que cont√™m "T cell" e seus subtipos "CD4" e "CD8"
Tcells_no = cellmarker_celltypes[grep("T cell", cellmarker_celltypes)] #93 outputs
TCD4_no = cellmarker_celltypes[grep("CD4", cellmarker_celltypes)] #35 outputs
TCD8_no = cellmarker_celltypes[grep("CD8", cellmarker_celltypes)] #34 outputs
Treg_no = cellmarker_celltypes[grep("Treg", cellmarker_celltypes)] #7 outputs
Thelper_no = cellmarker_celltypes[grep("helper", cellmarker_celltypes)] #17 outputs

# Filtrar outros tipos celulares da resposta imune
Neutrophils_no = cellmarker_celltypes[grep("neutrophil", cellmarker_celltypes)] #7 outputs
Monocyte_no = cellmarker_celltypes[grep("monocyte", cellmarker_celltypes)] #14 outputs
DCells_no = cellmarker_celltypes[grep("dendritic", cellmarker_celltypes)] #25 outputs
Macrophages_no = cellmarker_celltypes[grep("macrophage", cellmarker_celltypes)] #7 outputs
NKcells_no = cellmarker_celltypes[grep("killer", cellmarker_celltypes)] # 11 outputs
Neutrophils_no = cellmarker_celltypes[grep("mastcell", cellmarker_celltypes)] #7 outputs

# Adaptive immune system
Bcells <-
  filter(cells, str_detect(
    cell_name,
    regex("B cell|plasma cell|plasmablast", ignore_case = TRUE)
  ))
TCD4 <-
  filter(cells, str_detect(cell_name, regex("CD4", ignore_case = TRUE)))
TCD8 <-
  filter(cells, str_detect(cell_name, regex("CD8", ignore_case = TRUE)))
Treg <-
  filter(cells, str_detect(cell_name, regex("Treg", ignore_case = TRUE)))
Thelper <-
  filter(cells, str_detect(cell_name, regex("helper", ignore_case = TRUE)))


# Filtrar c√©lulas da resposta imune inata
Neutrophils <-
  filter(cells, str_detect(cell_name, regex("neutrophil", ignore_case = TRUE)))
Monocyte <-
  filter(cells, str_detect(cell_name, regex("monocyte", ignore_case = TRUE)))
DCells <-
  filter(cells, str_detect(cell_name, regex("dendritic", ignore_case = TRUE)))
Macrophages <-
  filter(cells, str_detect(cell_name, regex("macrophage", ignore_case = TRUE)))
Mastcells <-
  filter(cells, str_detect(cell_name, regex("mast cell", ignore_case = TRUE)))
NKcells <-
  filter(cells, str_detect(cell_name, regex("killer", ignore_case = TRUE)))
Platelets <-
  filter(cells, str_detect(cell_name, regex("Platelet", ignore_case = TRUE)))
Eosinophil <-
  filter(cells, str_detect(cell_name, regex("Eosinophil", ignore_case = TRUE)))
Basophil <-
  filter(cells, str_detect(cell_name, regex("Basophil", ignore_case = TRUE)))
Granulocyte <-
  filter(cells, str_detect(cell_name, regex("Granulocyte", ignore_case = TRUE)))

#Agrupar todos os resultados em Immune cells
Immune_adap = rbind(Bcells, TCD4, TCD8, Treg, Thelper)
Immune_adap$Type = "Adaptive"

Immune_innate = rbind(Neutrophils, Monocyte, DCells, Macrophages, Mastcells, NKcells, Platelets, Eosinophil, Basophil, Granulocyte)
Immune_innate$Type = "Innate"

#Unir tabelas
Immune_cells = rbind(Immune_adap, Immune_innate) 

#Salvar
write.csv(Immune_cells, file = here("Tables", "CellMarker_ImmuneCells.csv"))

```

Manual annotation

```{r}
Immune_cells <- read_csv(here("Tables", "CellMarker_ImmuneCells_grouped_24_07_24.csv"))

Immune_cells = Immune_cells %>% 
  select(-cell_name) %>% 
  rename(cell_name = cell_name_abrev) %>% 
  separate_rows(genes, sep = ",") %>% 
  distinct()
```

### Descriptive statistics

**Top 20 cells by markers**

```{r}
Immune_cells_markersbycells = Immune_cells %>% 
  group_by(cell_name, immune_sub_system) %>% 
  summarise(n_markers = n()) %>% 
  arrange(desc(n_markers))
Immune_cells_markersbycells_top = Immune_cells_markersbycells[1:20, ]

ggImmune_cells_markersbycells = ggplot(Immune_cells_markersbycells_top) +
  aes(x = n_markers, 
      y = reorder(cell_name, n_markers), 
      fill = immune_sub_system) +
  geom_col() +
  geom_text(aes(label = n_markers),
            hjust = -0.2,
            size = 3) +
  labs(
    x = "Number of gene markers",
    y = "",
    title = "Top 20 cells",
    subtitle = "By number of gene markers",
    fill = "Immune system",
    caption = "Caption: Cell Marker gene set analysis"
  ) +
  theme_vaxgo() +
  theme(legend.position = c(0.6, 0.4),
        axis.text.y = element_text(hjust = 1),
        axis.text.x = element_text(hjust = 0.5),
        axis.ticks.y = element_blank(),
        panel.grid = element_blank()) +
  scale_x_continuous(limits = c(0,500), 
                     breaks = seq(0, 400, 50),
                     expand = c(0,0)) +
  scale_y_discrete(expand = c(0, 0)) +
  scale_fill_jama()

ggImmune_cells_markersbycells

ggsave(ggImmune_cells_markersbycells, file = here("Figures", "CellMarker_Top10_cellsbyn_markers.png"), width = 10, height = 5)

```

**Number of Cells by immune system**

```{r}
Immune_cells_cellsbyimmune = Immune_cells %>% 
  group_by(immune_sub_system, cell_name) %>% 
  summarise(n_cells = n()) %>% 
  group_by(immune_sub_system) %>% 
  summarise(n_cells = n()) %>% 
  mutate(immune_sub_system = if_else(immune_sub_system == "Antigen presenting cell", "APC", immune_sub_system))

ggImmune_cells_cellsbyimmune = ggplot(Immune_cells_cellsbyimmune) +
  aes(x = reorder(immune_sub_system, -n_cells),
      y = n_cells,
      fill = immune_sub_system) +
  geom_col() +
  scale_fill_jama() +
  labs(x = "",
       y = "Cells",
       title = "Number of Cells by Immune System") +
  theme_vaxgo() +
  theme(axis.ticks.y = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.y = element_blank(),
        axis.text.x = element_text(vjust = 2),
        legend.position = "none",
        panel.grid = element_blank(),
        plot.title = element_text(hjust = 0.5,
                                  size = 10)) +
  geom_text(
    aes(label = n_cells, y = n_cells),
    vjust = -0.5,
    hjust = 0.5,
    size = 4
  ) +
  ylim(0,70)

ggImmune_cells_cellsbyimmune
ggsave(ggImmune_cells_cellsbyimmune, file= here("Figures", "CellMarker_Cells_by_immunesystem.png"), width = 8, height = 5)

```

### Jaccard, overlap coefficient and Venn Diagram heatmap

```{r}
############# Input
data = Immune_cells %>% 
  select(process = sub_system1, genes)
```

```{r}
############### VENN DIAGRAM

# Function -------
overlap_genes <- function(cond1, cond2, data) {
  genes_cond1 <- data$genes[data$process == cond1]
  genes_cond2 <- data$genes[data$process == cond2]
  
  genes_shared <- intersect(genes_cond1, genes_cond2)
  
  genes_notshared_cond1 <- setdiff(genes_cond1, genes_cond2)
  genes_notshared_cond2 <- setdiff(genes_cond2, genes_cond1)
  
  total_genes_cond1 <- length(genes_cond1)
  total_genes_cond2 <- length(genes_cond2)
  
  percentage_shared_cond1 <- length(genes_shared) / total_genes_cond1 * 100
  percentage_shared_cond2 <- length(genes_shared) / total_genes_cond2 * 100
  
  shared_genes <- data.frame(
    Cond1 = cond1,
    Cond2 = cond2,
    Shared = length(genes_shared),
    NotShared_cond1 = length(genes_notshared_cond1),
    NotShared_cond2 = length(genes_notshared_cond2),
    Total_Genes_Cond1 = total_genes_cond1,
    Total_Genes_Cond2 = total_genes_cond2,
    Genes_Names = paste(genes_shared, collapse = ", "),
    Percentage_Shared_Cond1 = percentage_shared_cond1,
    Percentage_Shared_Cond2 = percentage_shared_cond2
  )
  
  return(shared_genes)
}


# Perform calculations
unique_cond <- unique(data$process) # List sets
shared_genes_df <- data.frame() # Store data

for (i in 1:(length(unique_cond) - 1)) {
  for (j in (i + 1):length(unique_cond)) {
    resultado_temp <- overlap_genes(unique_cond[i], unique_cond[j], data)
    shared_genes_df <- bind_rows(shared_genes_df, resultado_temp)
  }
}

# Fisher's exact test
fisher_exact_test <- function(shared, notshared1, notshared2) {
  cont_table <- matrix(c(shared, notshared1, notshared2, 0), nrow = 2)
  results_fisher <- fisher.test(cont_table)
  return(results_fisher$p.value)
}
shared_genes_df = shared_genes_df %>%
  mutate(pvalue = pmap_dbl(list(Shared, NotShared_cond1, NotShared_cond2), fisher_exact_test))


#Duplicar e trocar colunas (Vacina 1 e Vacina 2)
shared_genes_df2 = shared_genes_df %>% 
  rename(Cond1_temp = Cond1, Cond2_temp = Cond2) %>%
  rename(Cond1 = Cond2_temp, Cond2 = Cond1_temp)

#Unir datasets com os dados espelhados
shared_genes_df_mirror = shared_genes_df %>% 
  bind_rows(shared_genes_df2) %>% 
  mutate(Percentage_Shared_Cond1 = round(Percentage_Shared_Cond1, 2),
         Percentage_Shared_Cond2 = round(Percentage_Shared_Cond2, 2))
  
#JACCARD DISTANCE
jaccard.matrix <- data %>%
  mutate(present = 1) %>% 
  distinct() %>% 
  pivot_wider(names_from = genes, values_from = present, values_fill = 0) %>%
  column_to_rownames(var = "process") %>%
  vegdist(binary = TRUE, method = "jaccard", diag = TRUE, upper = TRUE) %>%
  as.matrix() %>%
  {1 - .}

shared_genes_df_mirror = jaccard.matrix %>% 
  as.data.frame() %>% 
  rownames_to_column("Cond1") %>% 
  pivot_longer(cols = -"Cond1",
               names_to = "Cond2",
               values_to = "jaccard_distance") %>% 
  inner_join(shared_genes_df_mirror, by = join_by(Cond1, Cond2)) %>% 
  mutate(jaccard_distance = round(jaccard_distance, 3))

#Save
write.csv(shared_genes_df_mirror, file = here("Tables", "CellMarker_Immune_sharedgenes_Fisher_Jaccard.csv"))
```

### Flourish Circos plot

```{r}
shared_genes_df_mirror %>% 
  filter(Shared > 1,
         pvalue < 0.10) %>% 
  select(Cond1, Cond2, Shared, Total_Genes_Cond1, Percentage_Shared_Cond1, pvalue:"-log(p)") %>% 
  write_csv(file = here("Tables", "Flourish_Circos_CellMarker_Immune_Links.csv"))

shared_genes_df %>% 
  select(Cond1, Total_Genes_Cond1) %>% 
  distinct() %>% 
  write_csv(file = here("Tables", "Flourish_Circos_CellMarker_Immune_Points.csv"))


#Colors for Flourish
paste(names(col_immune), ":", col_immune) %>% 
  cat(., sep = "\n")

```

### Heatmap (overlap counts)

```{r}
cellmarker_heatmap = shared_genes_df_mirror %>% filter(pvalue <= 0.10)

cellmarker_heatmap.wide = cellmarker_heatmap %>% 
  select(Cond1, Cond2, Shared) %>% 
  pivot_wider(names_from = "Cond1",
              values_from = "Shared") %>% 
  column_to_rownames("Cond2") %>% 
  as.matrix() %>% 
  replace(is.na(.), 0)

annotation = CellMarker_ImmuneCells_grouped_24_07_24 %>% 
  select(immune_system, sub_system1) %>% 
  distinct() %>% 
  column_to_rownames("sub_system1")

immune_system<- c("#bc3908","#2a9d8f")
names(immune_system) <- c("Adaptive", "Innate")
col = list("Immune system" = immune_system)
```

```{r fig.width= 10, fig.height=8}
#Change name
annotation_2 = annotation %>% rename("Immune system" = immune_system)


#Heatmap annotation
ha = HeatmapAnnotation(df = annotation_2, 
                       col = col,
                       annotation_name_side = "right")

row_ha = row_ha = HeatmapAnnotation(df = annotation_2,
                       col = col,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors
col_fun <- colorRamp2(c(0, 100), c("white", "#ed6a5a"))

file = "CellMarker_Overlapping_SubSubsystem"
mat = cellmarker_heatmap.wide
width_image = 20
height_image = 20
width = unit(10, "cm")
height = unit(10, "cm")
column_names_gp = gpar(fontsize = 10)
row_names_gp = gpar(fontsize = 10)
rect_gp = gpar(col = "gray80", lwd = 0.5)

fileimageheatmap_grouped = here("Figures", paste0(file, sep ="_", "Complexheatmap.png"))

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                        left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "horizontal"),
                        col = col_fun, #color
                        cell_fun = function(j, i, x, y, width, height, fill) {
                                            if(mat[i, j] > 0)
                                            grid.text(sprintf("%.f", mat[i, j]), 
                                                      x, y, 
                                                      gp = gpar(fontsize = 5))},
                        show_column_names = TRUE,
                        column_title = file,
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "black",
                        name = "Shared",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(0, "cm"),
                        row_split = NULL,
                        column_split = NULL,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = F,
                        row_dend_side = "left",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height)

heatmap_plot = draw(heatmap_plot, 
     annotation_legend_side = "left", 
     heatmap_legend_side = "bottom")

heatmap_plot

dev.off()


```

### Heatmap (Jaccard distance)

```{r}
mat = jaccard.matrix
immune_system<- c("#bc3908","#2a9d8f")
names(immune_system) <- c("Adaptive", "Innate")
col = list("Immune system" = immune_system)
```

```{r fig.width= 10, fig.height=8}
#Change name
annotation_2 = annotation %>% rename("Immune system" = immune_system)

#Heatmap annotation
ha = HeatmapAnnotation(df = annotation_2, 
                       col = col,
                       annotation_name_side = "right")

row_ha = row_ha = HeatmapAnnotation(df = annotation_2,
                       col = col,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors

max_value = mat %>% 
   replace(. == 1.00000, 0) %>% 
   max()

min_value = mat %>% 
   replace(. == 1.00000, 0) %>% 
   min()

col_fun <- colorRamp2(c(min_value, max_value), c("white", "#ed6a5a"))

file = "CellMarker_Jaccard_SubSubsystem"
width_image = 20
height_image = 20
width = unit(10, "cm")
height = unit(10, "cm")
column_names_gp = gpar(fontsize = 10)
row_names_gp = gpar(fontsize = 10)
rect_gp = gpar(col = "gray80", lwd = 0.5)

fileimageheatmap_grouped = here("Figures", paste0(file, sep ="_", "Complexheatmap.png"))

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                        left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "horizontal"),
                        col = col_fun, #color
                        cell_fun = function(j, i, x, y, width, height, fill) {
                                            if(mat[i, j] > 0)
                                            grid.text(sprintf("%.2f", mat[i, j]), 
                                                      x, y, 
                                                      gp = gpar(fontsize = 5))},
                        show_column_names = TRUE,
                        column_title = file,
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "black",
                        name = "Jaccard distance",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(1, "cm"),
                        row_split = NULL,
                        column_split = NULL,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = T,
                        row_dend_side = "left",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height)

heatmap_plot = draw(heatmap_plot, 
     annotation_legend_side = "left", 
     heatmap_legend_side = "bottom")

dev.off()

heatmap_plot

```

## 1.3. ImmuneGO

**Download datasets**

```{r}
organism = "org.Hs.eg.db"
BiocManager::install(organism, character.only = TRUE)
library(organism, character.only = TRUE)
library(clusterProfiler)
library(GO.db)

#HGNC symbol to Entrez
x <- org.Hs.egSYMBOL
mapped_genes <- mappedkeys(x)
symbols_entrez <- as.data.frame(x[mapped_genes])

## Entrez to GO
x <- org.Hs.egGO
mapped_genes <- mappedkeys(x)
entrez_geneontology <- as.data.frame(x[mapped_genes])

## GO BP ancestors
go_bp_ancestor = GOBPANCESTOR %>% 
  as.data.frame()
colnames(go_bp_ancestor)[1] <- "go_id"
colnames(go_bp_ancestor)[2] <- "go_ancestor"

## GO ID to terms
go_bp = AnnotationDbi::select(GO.db, columns=c("GOID","TERM"), keys= "BP", keytype= "ONTOLOGY") %>% 
  clean_names() %>% 
  select(go_id = goid, term)

## GO child and ancestor
go_bp_ancestor = go_bp_ancestor %>% 
  inner_join(go_bp %>% rename(go_ancestor = go_id), by = "go_ancestor") %>% 
  rename(term_ancestor = term)

#GO ids to terms
go_bp = AnnotationDbi::select(GO.db, columns=c("GOID","TERM"), keys="BP", keytype="ONTOLOGY") %>% 
  clean_names() %>% 
  rename(go_id = goid) %>% 
  select(-ontology) %>% 
  right_join(entrez_geneontology, by = "go_id") %>% 
  right_join(symbols_entrez, by = "gene_id") %>% 
  clean_names() %>% 
  left_join(go_bp_ancestor, by = "go_id") %>% 
  distinct()

#GO immune process
immunego_go.bp = go_bp %>% 
  filter(term_ancestor == "immune system process") %>% 
  mutate(term = toupper(term))

# Merge retrieved gene sets with manual annotations
ImmuneGO_Annotated_GO = read_rds(here("Tables", "ImmuneGO_Annotated_GO_2024-03-26.rds"))

ImmuneGO_Annotated_Genes = ImmuneGO_Annotated_GO %>%
  mutate(genes = str_replace_all(genes, "\\s+", "")) %>%
  separate_rows(genes, sep = ",") %>%
  full_join(immunego_go.bp %>% select(genes = symbol, process = term), by = join_by("process", "genes")) %>%
  distinct()
write.csv(ImmuneGO_Annotated_Genes, file = here("Tables",  paste0("ImmuneGO_Annotated_Genes_", today(), ".csv")), row.names = F)

ImmuneGO_Annotated_GO = ImmuneGO_Annotated_Genes %>% 
  group_by(process) %>%
  summarize(genes = paste0(genes, collapse = ",")) %>%
  inner_join(ImmuneGO_Annotated_Genes_26_2_24 %>% select(-genes) %>% distinct(), by = "process") %>% 
  drop_na(.)
write.csv(ImmuneGO_Annotated_GO, file = here("Tables", paste0("ImmuneGO_Annotated_GO_", today(), ".csv")), row.names = F)
```

Group immune system genes by process and cell

```{r}
ImmuneGO_Annotated_unique = ImmuneGO_Annotated_Genes %>% 
  filter(go_term != "Manual")

#Agrupar genes de todos os processos do sistema imune ----

ImmuneGO_Adaptive <- ImmuneGO_Annotated_unique %>%
  filter(immune_system == "Adaptive") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "ADAPTIVE IMMUNE SYSTEM",
  `Gene set, short` = "Adaptive immune system",
  `Immune system` = "Adaptive",
  `Immune sub-system` = "General",
  `Immune tissue` = "General",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Innate <- ImmuneGO_Annotated_unique %>%
  filter(immune_system == "Innate") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "INNATE IMMUNE SYSTEM",
  `Gene set, short` = "Innate immune system",
  `Immune system` = "Innate",
  `Immune sub-system` = "General",
  `Immune tissue` = "General",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Complement <- ImmuneGO_Annotated_unique %>%
  filter(immune_system == "Complement") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "COMPLEMENT",
  `Gene set, short` = "Complement immune system",
  `Immune system` = "Complement",
  `Immune sub-system` = "General",
  `Immune tissue` = "General",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Inflammation <- ImmuneGO_Annotated_unique %>%
  filter(immune_sub_system == "Inflammation") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "INFLAMMATION",
  `Gene set, short` = "Inflammation",
  `Immune system` = "Innate",
  `Immune sub-system` = "Inflammation",
  `Immune tissue` = "General",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Interferon <- ImmuneGO_Annotated_unique %>%
  filter(immune_sub_system %in% c("Antiviral", "Interferon")) %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "ANTIVIRAL & IFN",
  `Gene set, short` = "Antiviral and Interferon",
  `Immune system` = "Innate",
  `Immune sub-system` = "Antiviral and Interferon",
  `Immune tissue` = "General",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_ARPP = ImmuneGO_Annotated_unique %>%
  filter(immune_sub_system %in% c("PRR", "APC")) %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "ARPP",
  `Gene set, short` = "Antigen receptors, processing and presentation",
  `Immune system` = "Innate",
  `Immune sub-system` = "APC",
  `Immune tissue` = "APC",
  `GO.TERM` = "Manual") %>% 
  clean_names()


ImmuneGO_Innate_DC <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "Dendritic cell") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "DENDRITIC CELL",
  `Gene set, short` = "Dendritic cell",
  `Immune system` = "Innate",
  `Immune sub-system` = "Cell",
  `Immune tissue` = "APC",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Innate_Macrophage <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "Macrophage") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "MACROPHAGE",
  `Gene set, short` = "Macrophage",
  `Immune system` = "Innate",
  `Immune sub-system` = "Cell",
  `Immune tissue` = "APC",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Innate_Mastcell <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "Mast cell") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "MAST CELL",
  `Gene set, short` = "Mast cell",
  `Immune system` = "Innate",
  `Immune sub-system` = "Cell",
  `Immune tissue` = "Mast cell",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Innate_Neutrophil <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "Neutrophil") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "NEUTROPHIL",
  `Gene set, short` = "Neutrophil",
  `Immune system` = "Innate",
  `Immune sub-system` = "Cell",
  `Immune tissue` = "Neutrophil",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Innate_Eosinophil <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "Eosinophil") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "EOSINOPHIL",
  `Gene set, short` = "Eosinophil",
  `Immune system` = "Innate",
  `Immune sub-system` = "Cell",
  `Immune tissue` = "Eosinophil",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Innate_NK <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "NK cell") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "NK CELL",
  `Gene set, short` = "Natural Killer Cell",
  `Immune system` = "Innate",
  `Immune sub-system` = "Cell",
  `Immune tissue` = "NK cell",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Innate_Monocyte <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "Monocyte") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "MONOCYTE",
  `Gene set, short` = "Monocyte",
  `Immune system` = "Innate",
  `Immune sub-system` = "Cell",
  `Immune tissue` = "APC",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Adap_Cellular <- ImmuneGO_Annotated_unique %>% 
  filter(immune_sub_system == "Cellular") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "CELLULAR ADAPTIVE IMMUNE SYSTEM",
  `Gene set, short` = "Cellular adaptive immune system",
  `Immune system` = "Adaptive",
  `Immune sub-system` = "Cellular",
  `Immune tissue` = "Cellular",
  `GO.TERM` = "Manual") %>% 
  clean_names()


ImmuneGO_Adap_Tcell <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "T cell") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "T CELL",
  `Gene set, short` = "T cell",
  `Immune system` = "Adaptive",
  `Immune sub-system` = "Cellular",
  `Immune tissue` = "Cellular",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Adap_Thelper <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "T helper") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "T HELPER CELLS",
  `Gene set, short` = "T helper cell",
  `Immune system` = "Adaptive",
  `Immune sub-system` = "Cellular",
  `Immune tissue` = "Cellular",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Adap_Humoral <- ImmuneGO_Annotated_unique %>%
  filter(immune_sub_system == "Humoral") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "HUMORAL ADAPTIVE IMMUNE SYSTEM",
  `Gene set, short` = "Humoral adaptive immune system",
  `Immune system` = "Adaptive",
  `Immune sub-system` = "Humoral",
  `Immune tissue` = "Humoral",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Adap_Bcell <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "B cell") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "B CELL",
  `Gene set, short` = "B cell",
  `Immune system` = "Adaptive",
  `Immune sub-system` = "Humoral",
  `Immune tissue` = "B cell",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_Adap_Ig <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "B cell") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "IMMUNOGLOBULIN MEDIATED RESPONSE",
  `Gene set, short` = "Ig-mediated response",
  `Immune system` = "Adaptive",
  `Immune sub-system` = "Humoral",
  `Immune tissue` = "B cell",
  `GO.TERM` = "Manual") %>% 
  clean_names()

ImmuneGO_other <- ImmuneGO_Annotated_unique %>%
  filter(immune_system == "General" |
         immune_tissue == "Leukocyte") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "GENERAL",
  `Gene set, short` = "General",
  `Immune system` = "General",
  `Immune sub-system` = "General",
  `Immune tissue` = "General",
  `GO.TERM` = "Manual") %>% 
  clean_names()


ImmuneGO_antimicrobial <- ImmuneGO_Annotated_unique %>%
  filter(immune_tissue == "Antimicrobial") %>% 
  summarize(set_size = n(), 
            genes = paste(genes, collapse = ",")) %>% 
  mutate(process = "ANTIMICROBIAL",
  `Gene set, short` = "Antimicrobial immune response",
  `Immune system` = "General",
  `Immune sub-system` = "General",
  `Immune tissue` = "General",
  `GO.TERM` = "Manual") %>% 
  clean_names()


# Unite sets -----

ImmuneGO_Annotated_GO = bind_rows(ImmuneGO_Adaptive, 
                            ImmuneGO_Innate, 
                            ImmuneGO_Complement, 
                            ImmuneGO_Inflammation,
                            ImmuneGO_Interferon,
                            ImmuneGO_ARPP,
                            ImmuneGO_Innate_Macrophage,
                            ImmuneGO_Innate_Mastcell,
                            ImmuneGO_Innate_Neutrophil,
                            ImmuneGO_Innate_Eosinophil,
                            ImmuneGO_Innate_NK,
                            ImmuneGO_Innate_Monocyte,
                            ImmuneGO_Adap_Cellular,
                            ImmuneGO_Adap_Tcell,
                            ImmuneGO_Adap_Thelper,
                            ImmuneGO_Adap_Humoral,
                            ImmuneGO_Adap_Bcell,
                            ImmuneGO_Adap_Ig,
                            ImmuneGO_other,
                            ImmuneGO_antimicrobial,
                            ImmuneGO_Innate_DC,
                            ImmuneGO_Annotated_unique) %>% 
  select(process:go_term, set_size:genes) %>% 
  distinct()

ImmuneGO_Annotated_Genes = ImmuneGO_Annotated_GO %>% 
   separate_rows(genes, sep = ",")

# Separate TCR and BCR repertoire genes
TCR_BCR_repertoire = ImmuneGO_Annotated_Genes %>% 
  filter(grepl("^TR", genes) & process == "ADAPTIVE IMMUNE SYSTEM" |
           grepl("^IG", genes) & process == "ADAPTIVE IMMUNE SYSTEM" |
           grepl("^TR", genes) & process == "CELLULAR ADAPTIVE IMMUNE SYSTEM" |
         grepl("^IG", genes) & process == "HUMORAL ADAPTIVE IMMUNE SYSTEM") %>% 
  mutate(process = if_else(process == "CELLULAR ADAPTIVE IMMUNE SYSTEM", "TCR REPERTOIRE", 
                           "BCR REPERTOIRE"),
         gene_set_short = if_else(process == "TCR REPERTOIRE", 
                                  "TCR REPERTOIRE", 
                           "BCR REPERTOIRE"),
         process = if_else(grepl("^TR", genes), "TCR REPERTOIRE", "BCR REPERTOIRE"),
         immune_sub_system = if_else(process == "TCR REPERTOIRE", "Cellular", "Humoral"),
         immune_tissue = if_else(process == "TCR REPERTOIRE", "Cellular", "Humoral"))

immunego_manual = ImmuneGO_Annotated_Genes %>%
  filter(go_term == "Manual") %>% 
  anti_join(TCR_BCR_repertoire %>% select(genes) %>% distinct(), by = "genes") %>% 
  bind_rows()

#Verify if all genes are annotated. If there are no left genes, you are good to go
a = ImmuneGO_Annotated_Genes %>% filter(go_term == "Manual") %>% select(genes) %>% distinct()
ImmuneGO_Annotated_Genes %>% select(process, genes, immune_system) %>% anti_join(a, by = "genes")


#Salvar
write.csv(ImmuneGO_Annotated_GO, file = here("Tables", paste0("ImmuneGO_Annotated_GO_", today(), ".csv")), row.names = F)
saveRDS(ImmuneGO_Annotated_GO, file = here("Tables", paste0("ImmuneGO_Annotated_GO_", today(), ".rds")))
saveRDS(ImmuneGO_Annotated_Genes, file = here("Tables", paste0("ImmuneGO_Annotated_Genes_", today()), ".rds"))

#Display
view(ImmuneGO_Annotated_GO)
view(ImmuneGO_Annotated_Genes)

```

### Descriptive statistics

Top 10 gene sets

```{r}

#Top 10 gene sets
ImmuneGO_Annotated_unique_top10 = ImmuneGO_Annotated_GO %>% 
  clean_names() %>% 
  arrange(desc(set_size)) %>% 
  slice_head(n = 20) %>% 
  mutate(immune_system = if_else(gene_set_short == "Adaptive Immune response", "Adaptive", immune_system))

#Gr√°fico de barras
ImmuneGO_top20_barplot = ggplot(ImmuneGO_Annotated_unique_top10) +
  aes(
    y = fct_reorder(gene_set_short, set_size),
    weight = set_size,
    fill = immune_system
  ) +  # Use reorder para reordenar as barras +
  geom_bar() +
  geom_text(aes(x = set_size,
                label = set_size),
            hjust = -0.2,
            size = 3) +
  labs(y = "Set size",
       x = "Set size",
       title = "ImmuneGO",
       subtitle = "Top 20 gene sets, by set size",
       fill = "Immune system") +
  theme_vaxgo() +
  theme(axis.text.y = element_text(hjust = 1),
        axis.ticks.y = element_blank(),
        panel.grid = element_blank(),
        legend.position = c(0.6, 0.4)) +
  scale_fill_jama() +
  scale_x_continuous(limits = c(0, 1100),
                     breaks = seq(0, 1000, 250),
                     expand = c(0,0)) +
  scale_y_discrete(expand = c(0,0)) 

ggsave(ImmuneGO_top20_barplot, file = here("Figures", "ImmuneGO_Top20_GOs_by_set_size.png"), width = 10, height = 6)

ImmuneGO_top20_barplot
```

**Overlapping genes between cells and processes**

```{r}
ImmuneGO_Annotated_Genes = ImmuneGO_Annotated_Genes %>% clean_names()

#Merge tables
ImmuneGO_Annotated_genes_manual = ImmuneGO_Annotated_Genes %>% 
  clean_names() %>% 
  group_by(process) %>% 
  arrange(desc(set_size)) %>% 
  filter(go_term == "Manual")

ImmuneGO_Annotated_genes_manual_2 = ImmuneGO_Annotated_genes_manual %>% 
  select(process, genes) 


overlapping_Immune_GOs = ImmuneGO_Annotated_genes_manual %>% 
  inner_join(ImmuneGO_Annotated_genes_manual_2,
             by = join_by(genes)) %>% 
  rename(process_1 = process.x,
         process_2 = process.y)

# Count overlapping genes by system
overlapping_Immune_GOs_count =  overlapping_Immune_GOs%>% 
  group_by(process_1, process_2) %>% 
  summarise(shared_genes = n(),
            genes = paste0(genes, collapse = ",")) %>% 
  filter(process_1 != process_2) %>% 
  arrange(-shared_genes)

write.csv(overlapping_immunego, file = here("Tables", "ImmuneGO_Annotated_Genes_Overlapping_Manual_Counts_By_GOs.csv"))


# Count overlapping genes
overlapping_Immune_Genes = overlapping_Immune_GOs %>% 
  group_by(genes) %>% 
  summarise(shared = as.integer(n()/2)) %>% 
  arrange(-shared)

write.csv(overlapping_Immune_Genes, file = here("Tables", "ImmuneGO_Annotated_Genes_Overlapping_Manual_Counts_By_Genes.csv"))

overlapping_Immune_Genes

```

**Top shared genes**

```{r}
overlapping_Immune_Genes

#Top 10 gene sets
ImmuneGO_Annotated_Genes_top20 = overlapping_Immune_Genes %>% 
  clean_names() %>% 
  arrange(desc(shared)) %>% 
  slice_head(n = 20) 

#Gr√°fico de barras
ImmuneGO_Genes_top20_barplot = ggplot(ImmuneGO_Annotated_Genes_top20) +
 aes(y = fct_reorder(genes, shared),
     x = shared) +
  geom_col(fill = "#DF8F44FF") +
    geom_text(aes(x = shared,
                label = shared),
            hjust = -0.2,
            size = 3) +
 labs(y = "Shared", 
      title = "ImmuneGO", 
      subtitle = "Top 20 shared genes, by number of shared processes") +
  theme_vaxgo() +
  theme(axis.text.y = element_text(hjust = 1),
        axis.ticks.y = element_blank(),
        axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        panel.grid = element_blank(),
        legend.position = c(0.6, 0.4)) +
  scale_fill_jama() +
  scale_x_continuous(limits = c(0, 80),
                     breaks = seq(0, 80, 10),
                     expand = c(0,0)) +
  scale_y_discrete(expand = c(0,0)) 

ImmuneGO_Genes_top20_barplot

#Salvar
ggsave(ImmuneGO_Genes_top20_barplot, file= here("Figures", "ImmuneGO_Genes_top20_Shared_Genes.png"), width = 5, height = 5)

```

### Jaccard, overlap coefficient, and Venn Diagram Heatmap

```{r}
#Input
data = ImmuneGO_Annotated_genes_manual %>% 
  filter(go_term == "Manual") %>% 
  select(process, genes)

# Fun√ß√£o para calcular a sobreposi√ß√£o entre pares de vacinas e a porcentagem de genes compartilhados
overlap_genes <- function(cond1, cond2, data) {
  genes_cond1 <- data$genes[data$process == cond1] #Trocar coluna
  genes_cond2 <- data$genes[data$process == cond2] #Trocar coluna
  genes_shared <- intersect(genes_cond1, genes_cond2)
  genes_notshared_cond1 <- setdiff(genes_cond1, genes_cond2)
  genes_notshared_cond2 <- setdiff(genes_cond2, genes_cond1)
  
  total_genes_cond1 <- length(genes_cond1)
  total_genes_cond2 <- length(genes_cond2)
  
  percentage_shared_cond1 <- length(genes_shared) / total_genes_cond1 * 100
  percentage_shared_cond2 <- length(genes_shared) / total_genes_cond2 * 100
  
  shared_genes <- data.frame(
    Cond1 = cond1,
    Cond2 = cond2,
    Shared = length(genes_shared),
    NotShared_cond1 = length(genes_notshared_cond1),
    NotShared_cond2 = length(genes_notshared_cond2),
    Total_Genes_Cond1 = total_genes_cond1,
    Total_Genes_Cond2 = total_genes_cond2,
    Genes_Names = paste(genes_shared, collapse = ", "),
    Percentage_Shared_Cond1 = percentage_shared_cond1,
    Percentage_Shared_Cond2 = percentage_shared_cond2
  )
  
  return(shared_genes)
}
# Obtenha uma lista de todas as vacinas √∫nicas
unique_cond <- unique(data$process)  #trocar "study" pelo nome da coluna de interesse

# Inicialize um dataframe para armazenar os resultados
shared_genes_df <- data.frame()

# Calcular a sobreposi√ß√£o e porcentagem para cada par de vacinas
for (i in 1:(length(unique_cond) - 1)) {
  for (j in (i + 1):length(unique_cond)) {
    resultado_temp <- overlap_genes(unique_cond[i], unique_cond[j], data)
    shared_genes_df <- bind_rows(shared_genes_df, resultado_temp)
  }
}

# Fun√ß√£o para realizar o teste exato de Fisher
fisher_exact_test <- function(shared, notshared1, notshared2) {
  cont_table <- matrix(c(shared, notshared1, notshared2, 0), nrow = 2)
  results_fisher <- fisher.test(cont_table)
  return(results_fisher$p.value)
}

shared_genes_df = shared_genes_df %>%
  mutate(pvalue = pmap_dbl(list(Shared, NotShared_cond1, NotShared_cond2), fisher_exact_test),
         "-log(p)" = -log(pvalue, 10))

#Mirror dataset
shared_genes_df2 = shared_genes_df %>% 
  rename(Cond1_temp = Cond1, Cond2_temp = Cond2) %>%
  rename(Cond1 = Cond2_temp, Cond2 = Cond1_temp)

shared_genes_df_mirror = shared_genes_df %>% 
  bind_rows(shared_genes_df2) %>% 
  mutate(Percentage_Shared_Cond1 = round(Percentage_Shared_Cond1, 2),
         Percentage_Shared_Cond2 = round(Percentage_Shared_Cond2, 2))
  
# Jaccard distance
jaccard.matrix <- data %>%
  mutate(present = 1) %>% 
  distinct() %>% 
  pivot_wider(names_from = genes, values_from = present, values_fill = 0) %>%
  column_to_rownames(var = "process") %>%
  vegdist(binary = TRUE, method = "jaccard", diag = TRUE, upper = TRUE) %>%
  as.matrix() %>%
  {1 - .}

shared_genes_df_mirror = jaccard.matrix %>% 
  as.data.frame() %>% 
  rownames_to_column("Cond1") %>% 
  pivot_longer(cols = -"Cond1",
               names_to = "Cond2",
               values_to = "jaccard_distance") %>% 
  inner_join(shared_genes_df_mirror, by = join_by(Cond1, Cond2)) %>% 
  mutate(jaccard_distance = round(jaccard_distance, 3))

#Save
write.csv(shared_genes_df_mirror, file = here("Tables", "ImmuneGO_sharedgenes_Fisher_Jaccard.csv")) #Alterar

```

### Flourish Circos plot

```{r}
# Standardize tables
shared_genes_df_mirror %>% 
  select(Cond1, Cond2, Shared, Total_Genes_Cond1, Percentage_Shared_Cond1, jaccard_distance, pvalue:"-log(p)") %>% 
  mutate(Cond1 = case_when(Cond1 == "ADAPTIVE IMMUNE SYSTEM" ~ "ADAPTIVE",
                           Cond1 == "CELLULAR ADAPTIVE IMMUNE SYSTEM" ~ "CELLULAR",
                           Cond1 == "HUMORAL ADAPTIVE IMMUNE SYSTEM" ~ "HUMORAL",
                           Cond1 == "IMMUNOGLOBULIN MEDIATED RESPONSE" ~ "IG-MEDIATED",
                           Cond1 == "INNATE IMMUNE SYSTEM" ~ "INNATE",
                           .default = Cond1),
         Cond2 = case_when(Cond2 == "ADAPTIVE IMMUNE SYSTEM" ~ "ADAPTIVE",
                           Cond2 == "CELLULAR ADAPTIVE IMMUNE SYSTEM" ~ "CELLULAR",
                           Cond2 == "HUMORAL ADAPTIVE IMMUNE SYSTEM" ~ "HUMORAL",
                           Cond2 == "IMMUNOGLOBULIN MEDIATED RESPONSE" ~ "IG-MEDIATED",
                           Cond2 == "INNATE IMMUNE SYSTEM" ~ "INNATE",
                           .default = Cond2)) %>% 
  write_csv(file = here("Tables", "Flourish_Circos_ImmuneGO_Links.csv"))

shared_genes_df %>% 
  mutate(Cond1 = case_when(Cond1 == "ADAPTIVE IMMUNE SYSTEM" ~ "ADAPTIVE",
                           Cond1 == "CELLULAR ADAPTIVE IMMUNE SYSTEM" ~ "CELLULAR",
                           Cond1 == "HUMORAL ADAPTIVE IMMUNE SYSTEM" ~ "HUMORAL",
                           Cond1 == "IMMUNOGLOBULIN MEDIATED RESPONSE" ~ "IG-MEDIATED",
                           Cond1 == "INNATE IMMUNE SYSTEM" ~ "INNATE",
                           .default = Cond1),
         Cond2 = case_when(Cond2 == "ADAPTIVE IMMUNE SYSTEM" ~ "ADAPTIVE",
                           Cond2 == "CELLULAR ADAPTIVE IMMUNE SYSTEM" ~ "CELLULAR",
                           Cond2 == "HUMORAL ADAPTIVE IMMUNE SYSTEM" ~ "HUMORAL",
                           Cond2 == "IMMUNOGLOBULIN MEDIATED RESPONSE" ~ "IG-MEDIATED",
                           Cond2 == "INNATE IMMUNE SYSTEM" ~ "INNATE",
                           .default = Cond2)) %>% 
  select(Cond1, Total_Genes_Cond1) %>% 
  distinct() %>% 
  write_csv(file = here("Tables", "Flourish_Circos_ImmuneGO_Points.csv"))


#Colors for Flourish
paste(names(col_immune), ":", col_immune) %>% 
  cat(., sep = "\n")

```

### Heatmap (overlap counts)

```{r fig.width= 10, fig.height=8}
#Matrix
matrix = shared_genes_df_mirror %>% 
  filter(pvalue < 0.10) %>% 
  select(Cond1, Cond2, Shared) %>% 
  mutate(Cond1 = case_when(Cond1 == "ADAPTIVE IMMUNE SYSTEM" ~ "ADAPTIVE",
                           Cond1 == "CELLULAR ADAPTIVE IMMUNE SYSTEM" ~ "CELLULAR",
                           Cond1 == "HUMORAL ADAPTIVE IMMUNE SYSTEM" ~ "HUMORAL",
                           Cond1 == "IMMUNOGLOBULIN MEDIATED RESPONSE" ~ "IG-MEDIATED",
                           Cond1 == "INNATE IMMUNE SYSTEM" ~ "INNATE",
                           .default = Cond1),
         Cond2 = case_when(Cond2 == "ADAPTIVE IMMUNE SYSTEM" ~ "ADAPTIVE",
                           Cond2 == "CELLULAR ADAPTIVE IMMUNE SYSTEM" ~ "CELLULAR",
                           Cond2 == "HUMORAL ADAPTIVE IMMUNE SYSTEM" ~ "HUMORAL",
                           Cond2 == "IMMUNOGLOBULIN MEDIATED RESPONSE" ~ "IG-MEDIATED",
                           Cond2 == "INNATE IMMUNE SYSTEM" ~ "INNATE",
                           .default = Cond2)) %>% 
  pivot_wider(names_from = "Cond2", 
              values_from = "Shared", 
              values_fn = mean) %>% 
  column_to_rownames(var="Cond1") %>%
  as.matrix() %>% 
  round(0)

# Column and row annotation
######## Annotations
annotation_immunego = shared_genes_df_mirror %>% 
  select(process = Cond1) %>% 
  distinct() %>% 
  inner_join(ImmuneGO_Annotated_GO, by = "process") %>% 
  select(process, immune_system) %>% 
  distinct()

#Columns
ann_cols_heatmap = matrix %>% 
  colnames() %>% 
  data.frame() %>% 
  rename(process = '.') %>% 
  inner_join(annotation_immunego, by = "process") %>% 
  distinct() %>% 
  arrange(process) %>% 
  column_to_rownames("process") %>% 
  mutate(immune_system = str_to_upper(immune_system))

matrix_data = matrix %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "process") %>% 
  inner_join(ann_cols_heatmap %>% rownames_to_column("process"), by = "process") %>% 
  select(!c(immune_system)) %>% 
  arrange(process) %>% 
  column_to_rownames("process") %>% 
  t() %>% 
  as.data.frame() %>% 
  mutate_if(is.character, as.numeric) %>%
  as.matrix() 

#Rows Immune ----
ann_rows_heatmap = ann_cols_heatmap


mat = matrix_data %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "process") %>% 
  inner_join(ann_rows_heatmap %>% rownames_to_column("process"), by = "process") %>% 
  select(!c(immune_system)) %>% 
  arrange(process) %>% 
  column_to_rownames("process") %>% 
  as.data.frame() %>% 
  mutate_if(is.character, as.numeric) %>%
  as.matrix() 

#Check dimensions
dim(mat)
dim(ann_cols_heatmap)
dim(ann_rows_heatmap)

```


```{r fig.width= 10, fig.height=8}

# Colors
col_immunego = list(immune_system = col_immune)

#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap, 
                       col = col_immunego,
                       annotation_name_side = "right")

row_ha = HeatmapAnnotation(df = ann_rows_immune,
                       col = col_immunego,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)


col_fun <- colorRamp2(c(0, 100), c("white", "#ed6a5a"))

#Plotar

file = "ImmuneGO_SharedGenes_total_pvalue010"
fileimageheatmap_grouped= here("Figures", paste0(file, sep ="_", "Complexheatmap.png"))

png(file = fileimageheatmap_grouped, width=20, height=20,units="cm",res=800)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                        left_annotation = row_ha,
                       cell_fun = function(j, i, x, y, width, height, fill) {
                         if (!is.na(mat[i, j]) && mat[i, j] > 0) {
                           grid.text(sprintf("%.0f", mat[i, j]), x, y, gp = gpar(fontsize = 6))
                         }
                       },
                       show_row_names = TRUE,
                       row_names_side = "right",
                       show_heatmap_legend = TRUE,
                       heatmap_legend_param = list(direction = "horizontal"),
                       col = col_fun,
                       column_title_gp = gpar(fontsize = 15, fontface = "bold"),
                       column_names_rot = 45,
                       column_names_gp = gpar(fontsize = 8),
                       #rect_gp = gpar(col = "gray90", lwd = 0.5),
                       cluster_rows = TRUE,
                       cluster_columns = TRUE,
                       
                       name = "Shared",
                       column_title = file,
                       row_names_gp = gpar(fontsize = 8),
                       row_dend_width = unit(2, "cm"),
                       row_split = NULL,
                       row_gap = unit(2, "mm"),
                       column_gap = unit(8, "mm"),
                       show_column_dend = F,
                       show_row_dend = T,
                       row_dend_side = "left",
                       na_col = "white",
                       column_dend_side = "top",
                       clustering_distance_rows = "euclidean",
                       border = TRUE,
                       column_dend_reorder = TRUE,
                       row_dend_reorder = T,
                       width = unit(10, "cm"),
                       height = unit(10, "cm") # 20 para pequeno, 60 para grande
                      )

draw(heatmap_plot, 
     annotation_legend_side = "left", 
     heatmap_legend_side = "bottom")
dev.off()
```


### Heatmap (Jaccard distance)


```{r fig.width= 10, fig.height=10}

mat = jaccard.matrix %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "process") %>% 
  inner_join(ann_rows_heatmap %>% rownames_to_column("process"), by = "process") %>% 
  select(!c(immune_system)) %>% 
  arrange(process) %>% 
  column_to_rownames("process") %>% 
  as.data.frame() %>% 
  mutate_if(is.character, as.numeric) %>%
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "process") %>% 
  inner_join(ann_rows_heatmap %>% rownames_to_column("process"), by = "process") %>% 
  select(!c(immune_system)) %>%
  arrange(process) %>% 
  column_to_rownames("process") %>% 
  as.matrix() %>% 
  replace(., . == 1.000, NA)

# Colors
col_immunego = list(immune_system = col_immune)

#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap, 
                       col = col_immunego,
                       annotation_name_side = "right")

row_ha = HeatmapAnnotation(df = ann_rows_immune,
                       col = col_immunego,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors

max_value = mat %>% 
   replace(. == 1.00000, 0) %>%
    replace(is.na(.), 0) %>%
   max()

min_value = mat %>% 
   replace(is.na(.), 1) %>%
   min()

col_fun <- colorRamp2(c(min_value, max_value), c("white", "#ed6a5a"))

file = "CellMarker_Jaccard_SubSubsystem"
width_image = 20
height_image = 20
width = unit(10, "cm")
height = unit(10, "cm")
column_names_gp = gpar(fontsize = 10)
row_names_gp = gpar(fontsize = 10)
rect_gp = gpar(col = "gray80", lwd = 0.5)

fileimageheatmap_grouped = here("Figures", paste0(file, sep ="_", "Complexheatmap.png"))

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                        left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "horizontal"),
                        col = col_fun, #color
                        cell_fun = function(j, i, x, y, width, height, fill) {
                                            if(mat[i, j] > 0 & 
                                               mat[i, j] < 1.00 & 
                                               !is.na(mat[i, j]))
                                            grid.text(sprintf("%.2f", mat[i, j]), 
                                                      x, y, 
                                                      gp = gpar(fontsize = 5))},
                        show_column_names = TRUE,
                        column_title = file,
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "black",
                        name = "Jaccard distance",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(1, "cm"),
                        row_split = NULL,
                        column_split = NULL,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = T,
                        row_dend_side = "left",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height)

draw(heatmap_plot, 
     annotation_legend_side = "left", 
     heatmap_legend_side = "bottom")

dev.off()

heatmap_plot

```


## 1.4. VAX Sig DB

The dataset was organized in R and further annotated in excel.

```{r}
############## Long table with Gene symbols

VAX_Genesets = VAXSigDB_Annotated

# Split gene list into rows and sum number of genes per study
VAX_Genes <- VAX_Genesets %>%
  mutate(GENE = GENE_SYMBOLS) %>% 
  separate_rows(GENE, sep = ",") %>% 
  select(GENE, everything()) %>%
  group_by(STANDARD_NAME) %>% #Somar e agrupar
  mutate(SetSize = n()) %>% 
  relocate(SetSize, .after = GENE_SYMBOLS)

VAX_GeneSets_annotated <- VAX_Genes %>%
  select(-GENE) %>% 
  distinct() 

#Salvar
write.csv(VAX_Genes, file = here("Tables","VAX_Genes_Annotated_RAW.csv"))
write.csv(VAX_GeneSets_annotated, file = here("Tables","VaxSigDB_Gene_sets_Annotated_RAW.csv"))

#Display
head(VAX_GeneSets_annotated)
```

### Descriptive statistics

```{r}

VAX_GeneSets_annotated = read_csv(here("Tables","VaxSigDB_Gene_sets_Annotated_RAW.csv"))

########## Descriptive statistics
vaccines = VAX_GeneSets_annotated %>% 
  group_by(VACCINE, PLATFORM, `TARGET_PATHOGEN_DISEASE`, MICROBE_TYPE) %>% 
  summarise(Count = n()) %>% 
  arrange(desc(Count))

pathogens = VAX_GeneSets_annotated %>% 
  group_by(`TARGET_PATHOGEN_DISEASE`, MICROBE_TYPE) %>% 
  summarise(Count = n()) %>% 
  arrange(desc(Count))

platforms = VAX_GeneSets_annotated %>% 
  group_by(PLATFORM) %>% 
  summarise(Count = n()) %>% 
  arrange(desc(Count))

vaccines
pathogens
platforms

```

By vaccines

```{r fig.width= 10, fig.height=10}
vaccine_hist = ggplot(vaccines) +
  aes(x = Count,
      y = reorder(VACCINE, Count),
      fill = `MICROBE_TYPE`) +
  geom_col() +
  geom_text(aes(label = Count),
            vjust = 0.5,
            hjust = -.5,
            size = 4) +
  labs(fill = "Target microbe",
       title = "VAX MSigDB - Vaccines, by platform and target") +
  theme_vaxgo() +
  theme(
    axis.text = element_text(colour = "black", size = 10),
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
     axis.ticks.y = element_blank(),
    strip.text = element_text(colour = "black"),
    legend.position = c(0.6, 0.4),
    legend.text = element_text(size = 10),
    legend.title = element_text(size = 12)
  ) +
  scale_fill_jama() +
  scale_y_discrete(expand = c(0,0)) +
  scale_x_continuous(limits = c(0, 50),
                     expand = c(0,0))

vaccine_hist

ggsave(vaccine_hist, file = here("Figures","VAXSigDB_Vaccines_platforms_pathogens.png"), width = 10, height = 10)
```

By platforms

```{r fig.width= 5, fig.height=3}
platforms_hist = ggplot(platforms) +
  aes(x = Count,
      y = reorder(`PLATFORM`, Count),
      fill = `PLATFORM`) + 
  ggtitle("VAX MSigDB - Vaccine platforms") +
  geom_col() +
  geom_text(aes(label = Count), vjust = 0.5, hjust = -0.2, size = 3) +
  theme_vaxgo() + 
  labs(fill = "Platform") +
  theme_vaxgo() +
  theme(
    axis.text = element_text(colour = "black", size = 10),
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
     axis.ticks.y = element_blank(),
    strip.text = element_text(colour = "black"),
    legend.position = "none"
  ) +
  scale_fill_jama() +
  scale_y_discrete(expand = c(0,0)) +
  scale_x_continuous(limits = c(0, 160),
                     expand = c(0,0))

ggsave(platforms_hist, file = here("Figures", "VAXSigDB_Platforms.png"), width = 5, height = 3)
platforms_hist
```

By pathogens

```{r fig.width= 5, fig.height=3}
pathogens_hist = ggplot(pathogens) +
  aes(
    x = Count,
    y = reorder(`TARGET_PATHOGEN_DISEASE`, Count),
    fill = `MICROBE_TYPE`
  ) +
  geom_col() +
  geom_text(
    aes(label = Count),
    vjust = 0.5,
    hjust = -0.2,
    size = 4
  ) +
  theme_vaxgo() +
  labs(fill = "Vaccine target type",
       title = "VAX MSigDB",
       subtitle = "Vaccines, by platform and target") +
  theme(
    axis.text = element_text(colour = "black", size = 10),
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.ticks.y = element_blank(),
    strip.text = element_text(colour = "black"),
    legend.position = c(0.6, 0.4),
    legend.text = element_text(size = 8),
    legend.title = element_text(size = 8)
  ) +
  #facet_wrap(vars(PLATFORM), scales = "free") +
  scale_fill_jama() +
  scale_y_discrete(expand = c(0, 0)) +
  scale_x_continuous(limits = c(0, 200),
                     expand = c(0, 0))

pathogens_hist

ggsave(pathogens_hist, file = here("Figures", "VAXSigDB_Pathogens_hist_1.png"), width = 5, height = 5)

```

### Filtering

```{r}
unique(VAX_GeneSets_annotated$STUDY_TYPE) 
#"CORRELATION"
#"VACCINE"
#"SUBSET"
#"CHALLENGE"

unique(VAX_GeneSets_annotated$STUDY_SUBTYPE)
# "ANTIBODY"				
# "VAC ONLY"				
# "BOOSTER"				
# "VAC VS CTRL"				
# "SIGNATURE"				
# "ADVERSE EVENT"			
# "COMPARISON"				
# "RESPONDER VS NON RESPONDER"				
# "AGE"				
# "RESPONDER"				
# "ADJUVANT"				
# "NON RESPONDER"				
# "ANTIMICROBIAL ACTIVITY"				
# "CELLS"				
# "CHALLENGE"				
# "TOP DEGS"				
# "PROTECTION"				
# "TRAINING SET"				
# "EXON ANALYSIS"				
# "DOSE"				
# "VAC VS OTHER"


# Subset de vacinas para as seguintes an√°lises comparativas
VAX_GeneSets_Blood_PBMC_VAC = VAX_GeneSets_annotated %>% 
  filter(SAMPLE_SOURCE %in% c("PBMC", "WHOLE BLOOD"), 
         STUDY_TYPE %in% c("VACCINE"))

# Subset de vacinas com resultados de compara√ß√µes entre vacinas, adjuvantes, idade e sexo
VAX_GeneSets_Blood_PBMC_CORR = VAX_GeneSets_annotated %>% 
  filter(SAMPLE_SOURCE %in% c("PBMC", "WHOLE BLOOD"), 
         STUDY_TYPE %in% c("CORRELATION"))

# Subset com resultados de correla√ß√µes com resposta inata, celular e humoral
VAX_GeneSets_Blood_PBMC_SUBSETS = VAX_GeneSets_annotated %>% 
  filter(SAMPLE_SOURCE %in% c("PBMC", "WHOLE BLOOD"), 
         STUDY_TYPE %in% c("SUBSET"))


# Subset de vacinas com genes associados a eventos adversos
VAX_GeneSets_Blood_PBMC_CHALLENGE = VAX_GeneSets_annotated %>% 
  filter(SAMPLE_SOURCE %in% c("PBMC", "WHOLE BLOOD"), 
         STUDY_TYPE %in% c("CHALLENGE"))

VAX_GeneSets_Blood_PBMC_VAC.stats = VAX_GeneSets_Blood_PBMC_VAC %>% 
  group_by(VACCINE, PLATFORM, REGULATION, `TARGET_PATHOGEN_DISEASE`, MICROBE_TYPE) %>% 
  summarise(Count = n()) %>% 
  arrange(desc(Count))

```

### Jaccard, overlap coefficient, and Venn Diagram Heatmap

```{r}
############### VENN DIAGRAM
#Input

dataset = VAX_GeneSets_Blood_PBMC_VAC

ann = dataset %>%
  mutate(VACCINE = paste0(VACCINE, " (", `DATE-TIME`, ")")) 

data = ann %>% 
  filter(STUDY_SUBTYPE == "VAC ONLY") %>% 
  separate_rows(GENE_SYMBOLS, sep = ",") %>% 
  select(VACCINE, GENE_SYMBOLS) %>% 
  as.data.frame()
  # mutate(VACCINE_REG = paste0(VACCINE, sep="_", REGULATION))
  
```

```{r}
# Fun√ß√£o para calcular a sobreposi√ß√£o entre pares de vacinas e a porcentagem de genes compartilhados
overlap_genes <- function(cond1, cond2, data) {
  genes_cond1 <- data$GENE_SYMBOLS[data$VACCINE == cond1] #Trocar coluna
  genes_cond2 <- data$GENE_SYMBOLS[data$VACCINE == cond2] #Trocar coluna
  genes_shared <- intersect(genes_cond1, genes_cond2)
  genes_notshared_cond1 <- setdiff(genes_cond1, genes_cond2)
  genes_notshared_cond2 <- setdiff(genes_cond2, genes_cond1)
  
  total_genes_cond1 <- length(genes_cond1)
  total_genes_cond2 <- length(genes_cond2)
  
  percentage_shared_cond1 <- length(genes_shared) / total_genes_cond1 * 100
  percentage_shared_cond2 <- length(genes_shared) / total_genes_cond2 * 100
  
  shared_genes <- data.frame(
    Cond1 = cond1,
    Cond2 = cond2,
    Shared = length(genes_shared),
    NotShared_cond1 = length(genes_notshared_cond1),
    NotShared_cond2 = length(genes_notshared_cond2),
    Total_Genes_Cond1 = total_genes_cond1,
    Total_Genes_Cond2 = total_genes_cond2,
    Genes_Names = paste(genes_shared, collapse = ", "),
    Percentage_Shared_Cond1 = percentage_shared_cond1,
    Percentage_Shared_Cond2 = percentage_shared_cond2
  )
  
  return(shared_genes)
}
# Obtenha uma lista de todas as vacinas √∫nicas
unique_cond <- unique(data$VACCINE)  #trocar "study" pelo nome da coluna de interesse

# Inicialize um dataframe para armazenar os resultados
shared_genes_df <- data.frame()

# Calcular a sobreposi√ß√£o e porcentagem para cada par de vacinas
for (i in 1:(length(unique_cond) - 1)) {
  for (j in (i + 1):length(unique_cond)) {
    resultado_temp <- overlap_genes(unique_cond[i], unique_cond[j], data)
    shared_genes_df <- bind_rows(shared_genes_df, resultado_temp)
  }
}

# Fun√ß√£o para realizar o teste exato de Fisher
fisher_exact_test <- function(shared, notshared1, notshared2) {
  cont_table <- matrix(c(shared, notshared1, notshared2, 0), nrow = 2)
  results_fisher <- fisher.test(cont_table)
  return(results_fisher$p.value)
}

# Aplicar a fun√ß√£o a cada linha da tabela de resultados
shared_genes_df$pvalue <- mapply(fisher_exact_test, 
                                    shared_genes_df$Shared, 
                                    shared_genes_df$NotShared_cond1, 
                                    shared_genes_df$NotShared_cond2)


# Calcular -log(p)
shared_genes_df$`-log(p)`= -log(shared_genes_df$pvalue, 10)

#Duplicar e trocar colunas (Vacina 1 e Vacina 2)
shared_genes_df2 = shared_genes_df
shared_genes_df2[, c("Cond1", "Cond2")] <- shared_genes_df2[, c("Cond2", "Cond1")]

#Unir datasets com os dados espelhados
shared_genes_df_mirror = rbind(shared_genes_df, shared_genes_df2)

#Converter NA, NaNe inf em 0
shared_genes_df_mirror[is.na(shared_genes_df_mirror)] <- 0
shared_genes_df_mirror<- replace(shared_genes_df_mirror, shared_genes_df_mirror == "Inf", 0)

#Arredondar porcentagens
shared_genes_df_mirror = shared_genes_df_mirror %>%
  mutate(Percentage_Shared_Cond1 = round(Percentage_Shared_Cond1, 2),
         Percentage_Shared_Cond2 = round(Percentage_Shared_Cond2, 2)) %>% 
  distinct()

# Jaccard distance
jaccard.matrix = data %>%
  clean_names() %>% 
  mutate(present = 1) %>% 
  rename(condition = vaccine, genes = gene_symbols) %>% 
  distinct() %>% 
  filter(genes != "") %>%
  pivot_wider(names_from = genes, values_from = present, values_fill = 0) %>%
  column_to_rownames(var = "condition") %>%
  vegdist(binary = TRUE, method = "jaccard", diag = TRUE, upper = TRUE) %>%
  as.matrix() %>%
  {1 - .}

shared_genes_df_mirror = jaccard.matrix %>% 
  as.data.frame() %>% 
  rownames_to_column("Cond1") %>% 
  pivot_longer(cols = -"Cond1",
               names_to = "Cond2",
               values_to = "jaccard_distance") %>% 
  inner_join(shared_genes_df_mirror, by = join_by(Cond1, Cond2)) %>% 
  mutate(jaccard_distance = round(jaccard_distance, 3))

#Save
write.csv(shared_genes_df_mirror, file = here("Tables", "ImmuneGO_sharedgenes_Fisher_Jaccard.csv"), row.names = F) #Alterar

```


### Flourish Circos plot

```{r}
# Standardize tables
shared_genes_df_mirror %>% 
  select(Cond1, Cond2, Shared, Total_Genes_Cond1, Percentage_Shared_Cond1, jaccard_distance, pvalue:"-log(p)") %>% 
  write_csv(file = here("Tables", "Flourish_Circos_VAXSigDB_Links.csv"))


#Colors for Flourish
colors = ann_vaxsig_colors$Platform %>% 
  as.data.frame() %>% 
  rownames_to_column("platform") %>% 
  rename(color_platform = ".")
  
colors_vax_platform = ann %>% 
  clean_names() %>% 
  select(vaccine, platform, Pathogen = target_pathogen_disease, microbe_type) %>% 
  inner_join(colors, by = "platform")


paste(colors_vax_platform$vaccine, ":", colors_vax_platform$color_platform) %>% 
  cat(., sep = "\n")

```



### Heatmap (overlap counts)

```{r fig.width= 25, fig.height=20}
####### INPUT
data_2 = shared_genes_df_mirror
filename_2 = "VAX_immune_"


######## Matrix
matrix = shared_genes_df_mirror %>% 
  filter(pvalue <=0.10
         ) %>% 
  select(Cond1, Cond2, Shared) %>% #Percentage_Shared_Cond1
  pivot_wider(names_from = "Cond1", 
              values_from = "Shared",  #Percentage_Shared_Cond1
              values_fn = mean) %>% 
  column_to_rownames(var="Cond2") %>% 
  as.matrix() %>%
  round(0)

######## Annotations
ann_cols_heatmap = data_2 %>% 
  inner_join(ann, by = join_by("Cond1" == VACCINE)) %>% 
  clean_names() %>% 
  select(cond1, Platform = platform, "Microbe type" = microbe_type, "Pathogen" = target_pathogen_disease) %>% 
  distinct() %>% 
  column_to_rownames("cond1") 

#Columns
matrix_data = matrix %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "cond1") %>% 
  inner_join(ann_cols_heatmap %>% rownames_to_column("cond1"), by = "cond1") %>% 
  select(!c(Platform:Pathogen)) %>% 
  arrange(cond1) %>% 
  distinct() %>% 
  column_to_rownames("cond1") %>% 
  t() %>% 
  as.data.frame()%>%  
  mutate_if(is.character, as.numeric) %>%
  replace(is.na(.), 0) %>% 
  as.matrix()


#Verificar dimens√µes do dataset
dim(matrix_data)
dim(ann_cols_heatmap)


#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap,
                       col = ann_vaxsig_colors,
                       annotation_name_side = "right",
                       annotation_legend_param = list(
                                            Platform = list(nrow=1),
                                            `Microbe type` = list(nrow=1),
                                            Pathogen = list(nrow=1)
                                            ))

row_ha = row_ha = HeatmapAnnotation(df = ann_cols_heatmap,
                       col = ann_vaxsig_colors,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)


col_fun <- colorRamp2(c(0, 100), c("white","#ed6a5a"))

#Plotar

file = "VAXSig_SharedGenes"
fileimageheatmap_grouped= paste0(file, sep ="_", "Complexheatmap.png")

png(file = here("Figures", fileimageheatmap_grouped), width=60, height=40,units="cm",res=800)

heatmap_plot = Heatmap(
  matrix,
  top_annotation = ha,
  left_annotation = row_ha,
  cell_fun = function(j, i, x, y, width, height, fill) {
    grid.text(sprintf("%.0f", matrix[i, j]), x, y, gp = gpar(fontsize = 8))
  },
  show_row_names = TRUE,
  row_names_side = "left",
  show_heatmap_legend = TRUE,
  heatmap_legend_param = list(direction = "horizontal"),
  col = col_fun,
  column_title_gp = gpar(fontsize = 15, fontface = "bold"),
  column_names_rot = 45,
  column_names_gp = gpar(fontsize = 10),
  #rect_gp = gpar(col = "gray90", lwd = 0.5),
  cluster_rows = TRUE,
  name = "Shared genes",
  column_title = file,
  row_names_gp = gpar(fontsize = 10), 
  row_dend_width = unit(10, "cm"),
  row_split = NULL,
  column_split = NULL,
  row_gap = unit(2, "mm"),
  cluster_columns = TRUE,
  column_gap = unit(2, "mm"),
  show_column_dend = F,
  show_row_dend = T,
  row_dend_side = "right",
  na_col = "black",
  column_dend_side = "top",
  clustering_distance_rows = "euclidean",
  border = TRUE,
  column_dend_reorder = TRUE,
  width = unit(30, "cm"),
  height = unit(30, "cm") 
)

draw(heatmap_plot, 
     annotation_legend_side = "top", 
     heatmap_legend_side = "bottom")

dev.off()

```

### Heatmap (Jaccard distance)


```{r fig.width= 25, fig.height=20}

mat = jaccard.matrix * 100

#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap,
                       col = ann_vaxsig_colors,
                       annotation_name_side = "right",
                       annotation_legend_param = list(
                                            Platform = list(nrow=1),
                                            `Microbe type` = list(nrow=1),
                                            Pathogen = list(nrow=1)
                                            ))

row_ha = row_ha = HeatmapAnnotation(df = ann_cols_heatmap,
                       col = ann_vaxsig_colors,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors

max_value = mat %>% 
   replace(. == 100, 0) %>% 
   max()

col_fun <- colorRamp2(c(0, 100), c("white", "#ed6a5a"))

file = "MsigDBVax_Jaccard"
width_image = 60
height_image = 40
width = unit(30, "cm")
height = unit(30, "cm")
column_names_gp = gpar(fontsize = 10)
row_names_gp = gpar(fontsize = 10)
rect_gp = gpar(col = "gray80", lwd = 0.5)

fileimageheatmap_grouped = here("Figures", paste0(file, sep ="_", "Complexheatmap.png"))

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                        left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "horizontal"),
                        col = col_fun, #color
                        cell_fun = function(j, i, x, y, width, height, fill) {
                                            if(mat[i, j] > 0 & mat[i, j] < 100.00)
                                            grid.text(sprintf("%.0f", mat[i, j]), 
                                                      x, y, 
                                                      gp = gpar(fontsize = 7))},
                        show_column_names = TRUE,
                        column_title = file,
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "black",
                        name = "Jaccard distance",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(10, "cm"),
                        row_split = NULL,
                        column_split = NULL,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = T,
                        row_dend_side = "left",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height)

heatmap_plot = draw(heatmap_plot, 
     annotation_legend_side = "top", 
     heatmap_legend_side = "bottom")

dev.off()

heatmap_plot

```

# 2.Overlapping a dataset with other vaccines

```{r}
############## Arquivos necess√°rios

dataset = VAX_GeneSets_Blood_PBMC_VAC

ann = dataset %>%
  mutate(VACCINE = paste0(VACCINE, " (", `DATE-TIME`, ")"),
         REGULATION = if_else(REGULATION == "UP", "1", "-1") %>% as.numeric())

data = ann %>% 
  filter(STUDY_SUBTYPE == "VAC ONLY") %>% 
  separate_rows(GENE_SYMBOLS, sep = ",") %>% 
  select(VACCINE, GENE_SYMBOLS, REGULATION) %>% 
  as.data.frame()


# Informa√ß√µes sobre os processos/Gene sets
ImmuneGO = ImmuneGO_Annotated_GO %>% 
  select(process:immune_tissue, set_size) %>% 
  distinct()

# Genes por gene sets
immunego_genes = ImmuneGO_Annotated_Genes%>%
  select(process,genes)

# Dados 
data.immunego = all_degs_p_05_vac_infected_19_12_23 %>% 
  select(condition:padj)

############## Processar dados

# Selecionar subprocessos para visualizar. Ao selecionar todos os genes de todos os processos, o heatmap ficar√° enorme e dif√≠cil de visualizar. Por isso, aqui, eu dividi em subprocessos com menos genes. Crie uma tabela-m√£e com anota√ß√µes para cada gene de cada condi√ß√£o analisada. Cada gene pode fazer parte de um ou mais processos/gene sets.

#Tabela-m√£e
Immune_GO_genes_All = data.immunego %>% 
  merge(immunego_genes, by = "genes", all.x = F, all.y=F) %>% 
  merge(ann_vaccines, by = "condition", all.y=F) %>% 
  clean_names()
```

*Qual a rela√ß√£o entre os genes de cada dataset?*

```{r}
# Gene sets for annotation
OtherGOs_Annotated_Genes = OtherGOs_Annotated_Genes %>% 
  filter(annotation == "Major process",
         term != "Immune system") %>% 
    anti_join(ImmuneGO_Annotated_Genes %>% 
                select(genes) %>% distinct(), 
              by = "genes")

# VAX Genes  ------
VAX_Genes_Annotated_RAW = VAX_Genes_Annotated_RAW %>% 
  clean_names() %>% 
  mutate(condition = paste0(vaccine, " (", date_time, ")"))

#ImmuneGO
degs_all_updown_vax_immunego = VAX_Genes_Annotated_RAW %>%
  clean_names() %>% 
  mutate(condition = paste0(vaccine, " (", date_time, ")")) %>% 
  select(condition, genes = gene, regulation) %>% 
  inner_join(ImmuneGO_Annotated_Genes %>% 
               select(genes), by = "genes") %>% 
  distinct()

# Not Immune
degs_all_updown_vax_notimmune = VAX_Genes_Annotated_RAW %>%
  clean_names() %>% 
  mutate(condition = paste0(vaccine, " (", date_time, ")")) %>% 
  select(condition, genes = gene, regulation) %>% 
  inner_join(OtherGOs_Annotated_Genes %>% 
               select(genes), by = "genes") %>% 
  distinct()

# Covid-19 conditions ----
degs_all_updown = degs_updown_p_05_vac_infected

#Immune
degs_all_updown_covid_immune = degs_all_updown %>% 
  as.data.frame() %>% 
  select(condition:padj) %>% 
  mutate(direction = case_when(log2fold_change >= 1 ~ "UP",
                               log2fold_change <= -1 ~ "DOWN",
                               TRUE ~ "NEUTRAL")) %>% 
  inner_join(ann_vaccines, by = "condition") %>% 
  inner_join(ImmuneGO_Annotated_Genes %>% select(genes) %>% distinct(), by = "genes") %>% 
  distinct() %>% 
  filter(vaccine != "I", 
         gse_id != "GSE189039") %>% 
  select(condition, genes, regulation = direction)  %>% 
  distinct()

# Not immune
degs_all_updown_covid_notimmune = degs_all_updown %>% 
  as.data.frame() %>% 
  select(condition:padj) %>% 
    mutate(direction = case_when(log2fold_change >= 1 ~ "UP",
                               log2fold_change <= -1 ~ "DOWN",
                               TRUE ~ "NEUTRAL")) %>% 
  inner_join(ann_vaccines, by = "condition") %>% 
  inner_join(OtherGOs_Annotated_Genes %>% select(genes) %>% distinct(), by = "genes") %>% 
  distinct() %>% 
  filter(vaccine != "I", 
         gse_id != "GSE189039") %>% 
  # select(condition, genes, regulation = direction)  %>% 
  distinct()


# Bind Immune ------
degs_all_updown_covid_other = bind_rows(degs_all_updown_vax_immunego, degs_all_updown_covid_immune) %>% 
  distinct()


covid_other_immunego_genes = degs_all_updown_covid_other %>% 
  distinct() %>% 
  filter(regulation %in% c("UP", "DOWN")) %>% 
  mutate(regulation_numeric = case_when(
    regulation %in% c("UP") ~ 1,
    regulation %in% c("DOWN") ~ -1,
    TRUE ~ as.numeric(regulation)
  )) %>% 
  distinct()

saveRDS(covid_other_immunego_genes, file = "covid_other_immunego_genes.rds")



# Bind not-immune ----
degs_all_updown_covid_other_notimmune = bind_rows(degs_all_updown_vax_notimmune, degs_all_updown_covid_notimmune) %>% 
  distinct()

covid_other_notimmune_genes = degs_all_updown_covid_other_notimmune %>% 
  anti_join(ImmuneGO_Annotated_Genes %>% select(genes) %>% distinct(), by = "genes") %>% 
  inner_join(OtherGOs_Annotated_Genes %>% select(process = term, genes) %>% filter(), by = "genes") %>% 
  distinct() %>% 
  filter(regulation %in% c("UP", "DOWN")) %>% 
  mutate(regulation_numeric = case_when(
    regulation %in% c("UP") ~ 1,
    regulation %in% c("DOWN") ~ -1,
    TRUE ~ as.numeric(regulation))) %>% 
  distinct()

saveRDS(covid_other_notimmune_genes, file = "covid_other_notimmune_genes.rds")


```

```{r}
###### Gene sets Immune GO ------

Immune_GO_genes_All = covid_other_immunego_genes 

Immune_GO_genes_Innate = Immune_GO_genes_All %>%
   filter(process == "INNATE IMMUNE SYSTEM")
Immune_GO_genes_Adaptive = Immune_GO_genes_All %>%
   filter(process == "ADAPTIVE IMMUNE SYSTEM")
Immune_GO_genes_Complement = Immune_GO_genes_All %>%
   filter(process == "COMPLEMENT IMMUNE SYSTEM")

# Sistema inato
Immune_GO_genes_Inflammation = Immune_GO_genes_All %>%
  filter(process == "INFLAMMATION")
Immune_GO_genes_ARPP = Immune_GO_genes_All %>%
  filter(process == "ARPP")
Immune_GO_genes_IFN = Immune_GO_genes_All %>%
  filter(process == "ANTIVIRAL AND INTERFERON")
Immune_GO_genes_Neutrophil = Immune_GO_genes_All %>%
  filter(process == "NEUTROPHIL")
Immune_GO_genes_Eosinophil = Immune_GO_genes_All %>%
  filter(process == "EOSINOPHIL")
Immune_GO_genes_Complement = Immune_GO_genes_All %>%
  filter(process == "COMPLEMENT IMMUNE SYSTEM")
Immune_GO_genes_Monocytes = Immune_GO_genes_All %>%
  filter(process == "MONOCYTES")
Immune_GO_genes_DC = Immune_GO_genes_All %>%
  filter(process == "DENDRITIC CELLS")
Immune_GO_genes_Macro = Immune_GO_genes_All %>%
  filter(process == "MACROPHAGES")
Immune_GO_genes_NK = Immune_GO_genes_All %>%
  filter(process == "NK CELL")

# Sistema adaptativo
Immune_GO_genes_Cellular = Immune_GO_genes_All %>%
  filter(process == "CELLULAR ADAPTIVE IMMUNE SYSTEM")
Immune_GO_genes_Humoral = Immune_GO_genes_All %>%
  filter(process == "HUMORAL ADAPTIVE IMMUNE SYSTEM")
Immune_GO_genes_Tcells = Immune_GO_genes_All %>%
  filter(process == "T CELLS")
Immune_GO_genes_Bcells = Immune_GO_genes_All %>%
  filter(process == "B CELLS")
Immune_GO_genes_Ig = Immune_GO_genes_All %>%
  filter(process == "IMMUNOGLOBULIN MEDIATED IMMUNE RESPONSE")

```

#### Heatmap

```{r}
####### INPUT
data_2 = Immune_GO_genes_All
filename_2 = paste0("Immune_GO_genes_All", "_VAX_COVID")

######## Matrix
matrix = data_2 %>% 
  select(genes, condition, regulation_numeric) %>%
  pivot_wider(names_from = "condition", 
              values_from = "regulation_numeric", 
              values_fn = mean) %>% 
  replace(is.na(.), 0) %>%
  arrange(genes) %>% 
  column_to_rownames(var="genes") %>% 
  as.matrix()

######## Annotations
ann_vaccines_covid_other_2 = data_2 %>% 
  inner_join(ann_vaccines_covid_other, by = "condition") %>% 
  select(condition, covid_other, microbe_type, disease_vac, type, week) %>% 
  distinct()

#Columns
ann_cols_heatmap = matrix %>% 
  colnames() %>% 
  data.frame() %>% 
  filter(. != "genes") %>% 
  rename(condition = '.') %>% 
  inner_join(ann_vaccines_covid_other_2, by = "condition") %>% 
  distinct() %>% 
  arrange(condition) %>% 
  column_to_rownames("condition")

matrix_data = matrix %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "condition") %>% 
  inner_join(ann_cols_heatmap %>% rownames_to_column("condition"), by = "condition") %>% 
  select(!c(covid_other:week)) %>% 
  arrange(condition) %>% 
  column_to_rownames("condition") %>% 
  t() %>% 
  as.data.frame() %>% 
  filter(rowSums(. != 0) > 1) %>% 
  mutate_if(is.character, as.numeric) %>%
  as.matrix() 

#Rows Immune ----
ann_rows_immune = matrix_data %>%
  as.data.frame() %>%
  rownames_to_column("genes") %>%
  left_join(ImmuneGO_Annotated_Genes %>%
              filter(go_term == "Manual",
                     !process %in% c("TCR REPERTOIRE", "BCR REPERTOIRE")), by = "genes") %>%
  select(genes, process) %>%
  distinct() %>%
  group_by(genes) %>%
  arrange(genes, factor(process, levels = c("INNATE IMMUNE SYSTEM", "ADAPTIVE IMMUNE SYSTEM")), .by_group = TRUE) %>%
  mutate(i_process = row_number()) %>%
  pivot_wider(., names_from = "i_process", values_from = "process") %>%
  column_to_rownames("genes") %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column("index") %>%
  mutate(index = as.numeric(index)) %>%
  arrange(desc(index)) %>%
  column_to_rownames("index") %>%
  t() %>%
  as.data.frame() %>%
  replace(is.na(.), ".")


# Rows Not immune -----
# ann_rows_notimmune = matrix_data %>%
#   as.data.frame() %>%
#   rownames_to_column("genes") %>%
#   left_join(ann_genes %>%
#                select(process = term, genes = symbol, annotation) %>%
#                filter(annotation == "Major process",
#                       process != "Immune system"), by = "genes") %>%
#   select(genes, process) %>%
#   distinct() %>%
#   group_by(genes) %>%
#   mutate(i_process = row_number()) %>%
#   pivot_wider(., names_from = "i_process", values_from = "process") %>%
#   column_to_rownames("genes") %>%
#   t() %>%
#   as.data.frame() %>%
#   rownames_to_column("index") %>%
#   arrange(desc(index)) %>%
#   column_to_rownames("index") %>%
#   t() %>%
#   as.data.frame() %>%
#   replace(is.na(.), ".")


#Verificar dimens√µes do dataset
dim(matrix_data)
dim(ann_cols_heatmap)
# dim(ann_rows_notimmune)
dim(ann_rows_immune)

```

Sizes: 1. Cellular adaptive immune system: width = unit(25, "cm"),
height = unit(60, "cm") #254 genes 2. Humoral adaptive immune system:
width = unit(25, "cm"), height = unit(30, "cm") #51 genes 3. T cells:
width = unit(25, "cm"), height = unit(60, "cm") #221 genes 4. B cells:
width = unit(25, "cm"), height = unit(50, "cm") #146 genes 5. Ig
mediated: width = unit(25, "cm"), height = unit(10, "cm") #146 genes 6.
Inflammation: width = unit(25, "cm"), height = unit(10, "cm") 7. ARPP:
width = unit(25, "cm"), height = unit(30, "cm") 60 genes 8. IFN: width =
unit(25, "cm"), height = unit(30, "cm") 93 genes 9. DC: width = unit(25,
"cm"), height = unit(20, "cm") #29 genes 10. Macrophages: width =
unit(25, "cm"), height = unit(25, "cm") \# 52 genes 11. Neutrophils:
width = unit(25, "cm"), height = unit(40, "cm") \# 70 genes 12.
Eosinophil: width = unit(25, "cm"), height = unit(10, "cm") \# 42 genes
13. Complement: width = unit(25, "cm"), height = unit(10, "cm") \# 40
genes 13. Monocytes: width = unit(25, "cm"), height = unit(15, "cm") \#
48 genes 15. All immune genes: width_image = 60, height_image = 70,
width = unit(30, "cm"), height = unit(60, "cm"), row_split = 7,
column_split = 2

More refs:
<https://debrowser.readthedocs.io/en/master/heatmap/heatmap.html>

### All genes

```{r}
################# Immune 
#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap, 
                       col = ann_vaxsig_colors,
                       annotation_name_side = "left")

row_ha = HeatmapAnnotation(df = ann_rows_immune,
                       col = col_process_immune,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors
col_fun <- colorRamp2(c(-1, 0, 1), c("#9bc1bc", "white", "#ed6a5a"))

file = filename_2
mat = matrix_data
width_image = 60
height_image = 50
width = unit(30, "cm")
height = unit(40, "cm")
column_names_gp = gpar(fontsize = 10)
row_names_gp = gpar(fontsize = 0)
rect_gp = gpar(col = "gray80", lwd = 0)
row_split = 2
column_split = 2


fileimageheatmap_grouped = paste0(file, sep ="_", "Complexheatmap.png")

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                        left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "vertical"),
                        col = col_fun, #color
                        name = "L2FC",
                        show_column_names = TRUE,
                        column_title = fileimageheatmap_grouped,
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "white",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(5, "cm"),
                        row_split = row_split,
                        column_split = column_split,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = F,
                        row_dend_side = "right",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        clustering_distance_columns = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height,
                        use_raster = F)

heatmap_plot = draw(heatmap_plot)

dev.off()

```

Get row clusters

```{r}
r.dend <- row_dend(heatmap_plot)  #Extract row dendrogram
rcl.list <- row_order(heatmap_plot)  #Extract clusters (output is a list)
lapply(rcl.list, function(x) length(x))  #check/confirm size cluster

gene_cluster <- NULL
for (i in 1:length(rcl.list)) {
  a <- row.names(mat[row_order(heatmap_plot)[[i]], ])
  gene_cluster <- rbind(gene_cluster, data.frame(genes = a, cluster = paste0("cluster ", i), gene_set = "Immune genes"))
}
write.csv(gene_cluster, file = paste0(file, "_clustered_genes.csv"), row.names = F)
```

### Cluster 1 Immune genes

```{r}
####### INPUT
data_2 = Immune_GO_genes_All %>% 
  inner_join(gene_cluster %>% filter(cluster == "cluster 1") %>% select(genes), by = "genes")
filename_2 = paste0("Immune_GO_genes_cluster1", "_VAX_COVID")
```

```{r}
######## Matrix
matrix = data_2 %>% 
  select(genes, condition, regulation_numeric) %>%
  pivot_wider(names_from = "condition", 
              values_from = "regulation_numeric", 
              values_fn = mean) %>% 
  replace(is.na(.), 0) %>%
  arrange(genes) %>% 
  column_to_rownames(var="genes") %>% 
  as.matrix()

######## Annotations
ann_vaccines_covid_other_2 = data_2 %>% 
  inner_join(ann_vaccines_covid_other, by = "condition") %>% 
  select(condition, covid_other, microbe_type, disease_vac, type, week) %>% 
  distinct()

#Columns
ann_cols_heatmap = matrix %>% 
  colnames() %>% 
  data.frame() %>% 
  filter(. != "genes") %>% 
  rename(condition = '.') %>% 
  inner_join(ann_vaccines_covid_other_2, by = "condition") %>% 
  distinct() %>% 
  arrange(condition) %>% 
  column_to_rownames("condition")

matrix_data = matrix %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "condition") %>% 
  inner_join(ann_cols_heatmap %>% rownames_to_column("condition"), by = "condition") %>% 
  select(!c(covid_other:week)) %>% 
  arrange(condition) %>% 
  column_to_rownames("condition") %>% 
  t() %>% 
  as.data.frame() %>% 
  mutate_if(is.character, as.numeric) %>%
  as.matrix() 

#Rows Immune ----
ann_rows_immune = matrix_data %>%
  as.data.frame() %>%
  rownames_to_column("genes") %>%
  left_join(ImmuneGO_Annotated_Genes %>% filter(go_term == "Manual"), by = "genes") %>%
  select(genes, process) %>%
  distinct() %>%
  group_by(genes) %>%
  arrange(genes, factor(process, levels = c("INNATE IMMUNE SYSTEM", "ADAPTIVE IMMUNE SYSTEM")), .by_group = TRUE) %>%
  mutate(i_process = row_number()) %>%
  pivot_wider(., names_from = "i_process", values_from = "process") %>%
  column_to_rownames("genes") %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column("index") %>%
  mutate(index = as.numeric(index)) %>%
  arrange(desc(index)) %>%
  column_to_rownames("index") %>%
  t() %>%
  as.data.frame() %>%
  replace(is.na(.), ".") %>% 
  mutate(`1` = if_else(`1` == ".", "INNATE IMMUNE SYSTEM", `1`))


#Verificar dimens√µes do dataset
dim(matrix)
dim(matrix_data)
dim(ann_cols_heatmap)
dim(ann_rows_immune)

```

More refs:
<https://debrowser.readthedocs.io/en/master/heatmap/heatmap.html>

```{r}
################# Immune 
#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap, 
                       col = ann_vaxsig_colors,
                       annotation_name_side = "right")

row_ha = row_ha = HeatmapAnnotation(df = ann_rows_immune,
                       col = col_process_immune,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors
col_fun <- colorRamp2(c(-1, 0, 1), c("#9bc1bc", "white", "#ed6a5a"))

file = filename_2
mat = matrix_data
width_image = 50
height_image = 50
width = unit(30, "cm")
height = unit(30, "cm")
column_names_gp = gpar(fontsize = 12)
row_names_gp = gpar(fontsize = 12)
rect_gp = gpar(col = "gray80", lwd = 0.5)

fileimageheatmap_grouped = paste0(file, sep ="_", "Complexheatmap.png")

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                       left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "horizontal"),
                        col = col_fun, #color
                        show_column_names = TRUE,
                        column_title = fileimageheatmap_grouped,
                       name = "L2FC",
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "white",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(0, "cm"),
                        row_split = NULL,
                        column_split = 2,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = F,
                        row_dend_side = "left",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height)

heatmap_plot = draw(heatmap_plot, 
     annotation_legend_side = "left", 
     heatmap_legend_side = "left",
     merge_legend = TRUE)

heatmap_plot

dev.off()

```

## 50 most shared genes

```{r}
#### Immune -----
ann_vaccines_covid_other = ann_vaccines_vaxsig_covid

stats_1 = degs_all_updown_covid_vax_other_immune %>% 
  inner_join(ann_vaccines_covid_other, by = "condition") %>% 
  group_by(genes, covid_other) %>% 
  summarise(n_conditions = n()) %>% 
  filter(all(c("COVID", "OTHER") %in% covid_other)) %>% 
  arrange(desc(n_conditions), genes) %>% 
  group_by(genes) %>% 
  pivot_wider(., names_from = "covid_other", values_from = n_conditions) %>% 
  arrange(desc(OTHER)) %>% 
  ungroup() %>% 
  slice_head(n = 50) %>% 
  pivot_longer(-genes, names_to = "covid_other", values_to = "n_conditions")


stats_1 = degs_all_updown_covid_vax_other_immune %>% 
  inner_join(ann_vaccines_covid_other, by = "condition") %>% 
  group_by(genes, covid_other) %>% 
  summarise(n_conditions = n()) %>% 
  filter(all(c("COVID", "OTHER") %in% covid_other)) %>% 
  arrange(desc(n_conditions), genes) %>% 
  group_by(genes) %>% 
  pivot_wider(., names_from = "covid_other", values_from = n_conditions) %>% 
  arrange(desc(OTHER)) %>% 
  ungroup() %>% 
  slice_head(n = 50) %>% 
  pivot_longer(-genes, names_to = "covid_other", values_to = "n_conditions")

stats_1 %>% 
  select(genes) %>% 
  distinct()

ggplot_stats1 = ggplot(stats_1) +
  aes(x = reorder(genes, n_conditions), fill = covid_other, weight = n_conditions) +
  geom_bar() +
  theme_minimal() +
  scale_fill_manual(
    values = c(COVID = "#56cfe1",
    OTHER = "#343a40")
  ) +
  theme_minimal() +
  labs(fill = "Covid or non-covid") +
  xlab("Genes") + 
  ylab("Number of shared conditions") +
  theme(legend.position = "right",
        axis.text.x = element_text(vjust = 1.5, hjust=1, size = 12),
        axis.text.y = element_text(size = 12, angle = 0, color = "black"),
        panel.grid.minor.y = element_blank(),
        legend.text = element_text(size=12),
        legend.title = element_text(size = 12, face = "bold")) +
  # geom_text(aes(label = n_conditions, y = n_conditions), 
  #           position = position_dodge(width = 0.9), 
  #           vjust = 0.2, 
  #           hjust = -0.2, 
  #           size = 1,
  #           angle = 90) +
  ggtitle("Genes shared") +
  coord_flip()

ggsave(ggplot_stats1, file = "Covid_Vax_genes_shared_column.png", width = 10, height = 10)


# Subset the 50 most shared genes
covid_other_immune_genes_50_mostshared_all = stats_1 %>% 
  select(genes) %>% 
  distinct() %>% 
  inner_join(degs_all_updown_covid_vax_other_immune %>% 
               select(condition, genes), by = "genes")
```

Heatmap

```{r}
####### INPUT
data_2 = covid_other_immune_genes_50_mostshared_all
filename_2 = paste0("mmune_GO_genes_All_50", "_VAX_COVID")

######## Matrix
matrix = data_2 %>% 
  select(genes, condition, regulation_numeric) %>%
  pivot_wider(names_from = "condition", 
              values_from = "regulation_numeric", 
              values_fn = mean) %>% 
  replace(is.na(.), 0) %>%
  arrange(genes) %>% 
  column_to_rownames(var="genes") %>% 
  as.matrix()

######## Annotations
ann_vaccines_covid_other_2 = data_2 %>% 
  inner_join(ann_vaccines_covid_other, by = "condition") %>% 
  select(condition, covid_other, microbe_type, disease_vac, type, week) %>% 
  distinct()

#Columns
ann_cols_heatmap = matrix %>% 
  colnames() %>% 
  data.frame() %>% 
  filter(. != "genes") %>% 
  rename(condition = '.') %>% 
  inner_join(ann_vaccines_covid_other_2, by = "condition") %>% 
  distinct() %>% 
  arrange(condition) %>% 
  column_to_rownames("condition")

matrix_data = matrix %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column(var= "condition") %>% 
  inner_join(ann_cols_heatmap %>% rownames_to_column("condition"), by = "condition") %>% 
  select(!c(covid_other:week)) %>% 
  arrange(condition) %>% 
  column_to_rownames("condition") %>% 
  t() %>% 
  as.data.frame() %>% 
  mutate_if(is.character, as.numeric) %>%
  as.matrix() 

#Rows Immune ----
ann_rows_immune = matrix_data %>%
  as.data.frame() %>%
  rownames_to_column("genes") %>%
  left_join(ImmuneGO_Annotated_Genes %>% filter(go_term == "Manual"), by = "genes") %>%
  select(genes, process) %>%
  distinct() %>%
  group_by(genes) %>%
  arrange(genes, factor(process, levels = c("INNATE IMMUNE SYSTEM", "ADAPTIVE IMMUNE SYSTEM")), .by_group = TRUE) %>%
  mutate(i_process = row_number()) %>%
  pivot_wider(., names_from = "i_process", values_from = "process") %>%
  column_to_rownames("genes") %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column("index") %>%
  mutate(index = as.numeric(index)) %>%
  arrange(desc(index)) %>%
  column_to_rownames("index") %>%
  t() %>%
  as.data.frame() %>%
  replace(is.na(.), ".") %>% 
  mutate(`1` = if_else(`1` == ".", "INNATE IMMUNE SYSTEM", `1`))


# Rows Not immune -----
ann_rows_notimmune = matrix_data %>%
  as.data.frame() %>%
  rownames_to_column("genes") %>%
  left_join(ann_genes %>%
               select(process = term, genes = symbol, annotation) %>%
               filter(annotation == "Major process",
                      process != "Immune system"), by = "genes") %>%
  select(genes, process) %>%
  distinct() %>%
  group_by(genes) %>%
  mutate(i_process = row_number()) %>%
  pivot_wider(., names_from = "i_process", values_from = "process") %>%
  column_to_rownames("genes") %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column("index") %>%
  arrange(desc(index)) %>%
  column_to_rownames("index") %>%
  t() %>%
  as.data.frame() %>%
  replace(is.na(.), ".")


#Verificar dimens√µes do dataset
dim(matrix)
dim(matrix_data)
dim(ann_cols_heatmap)
dim(ann_rows_notimmune)
dim(ann_rows_immune)

```

More refs:
<https://debrowser.readthedocs.io/en/master/heatmap/heatmap.html>

```{r}
################# Immune 
#Heatmap annotation
ha = HeatmapAnnotation(df = ann_cols_heatmap, 
                       col = ann_vaxsig_colors,
                       annotation_name_side = "right")

row_ha = row_ha = HeatmapAnnotation(df = ann_rows_immune,
                       col = col_process_immune,
                       which= "row",
                       show_annotation_name = F,
                       show_legend = F)

# Values colors
col_fun <- colorRamp2(c(-1, 0, 1), c("#9bc1bc", "white", "#ed6a5a"))

file = filename_2
mat = matrix_data
width_image = 50
height_image = 50
width = unit(30, "cm")
height = unit(30, "cm")
column_names_gp = gpar(fontsize = 12)
row_names_gp = gpar(fontsize = 8)
rect_gp = gpar(col = "gray80", lwd = 0.5)

fileimageheatmap_grouped = paste0(file, sep ="_", "Complexheatmap.png")

png(file = fileimageheatmap_grouped, 
    width = width_image, 
    height = height_image, 
    units="cm", 
    res=900)

heatmap_plot = Heatmap(mat,
                        top_annotation = ha,
                       left_annotation = row_ha,
                        show_row_names = TRUE,
                        row_names_side = "right",
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(direction = "horizontal"),
                        col = col_fun, #color
                        show_column_names = TRUE,
                        column_title = fileimageheatmap_grouped,
                        column_title_gp = gpar(fontsize = 10, fontface = "bold"),
                        column_names_rot = 45,
                        column_names_gp = column_names_gp,
                        rect_gp = rect_gp,
                        na_col = "white",
                        cluster_rows = TRUE,
                        row_names_gp = row_names_gp,
                        row_dend_width = unit(0, "cm"),
                        row_split = NULL,
                        column_split = 2,
                        row_gap = unit(2, "mm"),
                        cluster_columns = TRUE,
                        column_gap = unit(8, "mm"),
                        show_column_dend = F,
                        show_row_dend = F,
                        row_dend_side = "left",
                        column_dend_side = "top",
                        clustering_distance_rows = "euclidean",
                        border = TRUE,
                        width = width,
                        height = height)

heatmap_plot = draw(heatmap_plot, 
     annotation_legend_side = "left", 
     heatmap_legend_side = "left")

heatmap_plot

dev.off()

```
